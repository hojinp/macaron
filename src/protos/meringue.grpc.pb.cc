// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: meringue.proto

#include "meringue.pb.h"
#include "meringue.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace meringue {

static const char* MeringueService_method_names[] = {
  "/meringue.MeringueService/Initialize",
  "/meringue.MeringueService/PutSingleMD",
  "/meringue.MeringueService/GetSingleMD",
  "/meringue.MeringueService/DeleteSingleMD",
  "/meringue.MeringueService/UpdateCache",
  "/meringue.MeringueService/UpdateSizeAndEvict",
  "/meringue.MeringueService/RunGC",
  "/meringue.MeringueService/SortAndWrite",
};

std::unique_ptr< MeringueService::Stub> MeringueService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MeringueService::Stub> stub(new MeringueService::Stub(channel, options));
  return stub;
}

MeringueService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Initialize_(MeringueService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PutSingleMD_(MeringueService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSingleMD_(MeringueService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSingleMD_(MeringueService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateCache_(MeringueService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateSizeAndEvict_(MeringueService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RunGC_(MeringueService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SortAndWrite_(MeringueService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MeringueService::Stub::Initialize(::grpc::ClientContext* context, const ::meringue::InitializeRequest& request, ::meringue::InitializeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::meringue::InitializeRequest, ::meringue::InitializeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Initialize_, context, request, response);
}

void MeringueService::Stub::async::Initialize(::grpc::ClientContext* context, const ::meringue::InitializeRequest* request, ::meringue::InitializeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::meringue::InitializeRequest, ::meringue::InitializeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Initialize_, context, request, response, std::move(f));
}

void MeringueService::Stub::async::Initialize(::grpc::ClientContext* context, const ::meringue::InitializeRequest* request, ::meringue::InitializeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Initialize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::meringue::InitializeResponse>* MeringueService::Stub::PrepareAsyncInitializeRaw(::grpc::ClientContext* context, const ::meringue::InitializeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::meringue::InitializeResponse, ::meringue::InitializeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Initialize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::meringue::InitializeResponse>* MeringueService::Stub::AsyncInitializeRaw(::grpc::ClientContext* context, const ::meringue::InitializeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitializeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MeringueService::Stub::PutSingleMD(::grpc::ClientContext* context, const ::meringue::PutSingleMDRequest& request, ::meringue::PutSingleMDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::meringue::PutSingleMDRequest, ::meringue::PutSingleMDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PutSingleMD_, context, request, response);
}

void MeringueService::Stub::async::PutSingleMD(::grpc::ClientContext* context, const ::meringue::PutSingleMDRequest* request, ::meringue::PutSingleMDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::meringue::PutSingleMDRequest, ::meringue::PutSingleMDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutSingleMD_, context, request, response, std::move(f));
}

void MeringueService::Stub::async::PutSingleMD(::grpc::ClientContext* context, const ::meringue::PutSingleMDRequest* request, ::meringue::PutSingleMDResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutSingleMD_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::meringue::PutSingleMDResponse>* MeringueService::Stub::PrepareAsyncPutSingleMDRaw(::grpc::ClientContext* context, const ::meringue::PutSingleMDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::meringue::PutSingleMDResponse, ::meringue::PutSingleMDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PutSingleMD_, context, request);
}

::grpc::ClientAsyncResponseReader< ::meringue::PutSingleMDResponse>* MeringueService::Stub::AsyncPutSingleMDRaw(::grpc::ClientContext* context, const ::meringue::PutSingleMDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPutSingleMDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MeringueService::Stub::GetSingleMD(::grpc::ClientContext* context, const ::meringue::GetSingleMDRequest& request, ::meringue::GetSingleMDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::meringue::GetSingleMDRequest, ::meringue::GetSingleMDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSingleMD_, context, request, response);
}

void MeringueService::Stub::async::GetSingleMD(::grpc::ClientContext* context, const ::meringue::GetSingleMDRequest* request, ::meringue::GetSingleMDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::meringue::GetSingleMDRequest, ::meringue::GetSingleMDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSingleMD_, context, request, response, std::move(f));
}

void MeringueService::Stub::async::GetSingleMD(::grpc::ClientContext* context, const ::meringue::GetSingleMDRequest* request, ::meringue::GetSingleMDResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSingleMD_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::meringue::GetSingleMDResponse>* MeringueService::Stub::PrepareAsyncGetSingleMDRaw(::grpc::ClientContext* context, const ::meringue::GetSingleMDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::meringue::GetSingleMDResponse, ::meringue::GetSingleMDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSingleMD_, context, request);
}

::grpc::ClientAsyncResponseReader< ::meringue::GetSingleMDResponse>* MeringueService::Stub::AsyncGetSingleMDRaw(::grpc::ClientContext* context, const ::meringue::GetSingleMDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSingleMDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MeringueService::Stub::DeleteSingleMD(::grpc::ClientContext* context, const ::meringue::DeleteSingleMDRequest& request, ::meringue::DeleteSingleMDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::meringue::DeleteSingleMDRequest, ::meringue::DeleteSingleMDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteSingleMD_, context, request, response);
}

void MeringueService::Stub::async::DeleteSingleMD(::grpc::ClientContext* context, const ::meringue::DeleteSingleMDRequest* request, ::meringue::DeleteSingleMDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::meringue::DeleteSingleMDRequest, ::meringue::DeleteSingleMDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSingleMD_, context, request, response, std::move(f));
}

void MeringueService::Stub::async::DeleteSingleMD(::grpc::ClientContext* context, const ::meringue::DeleteSingleMDRequest* request, ::meringue::DeleteSingleMDResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSingleMD_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::meringue::DeleteSingleMDResponse>* MeringueService::Stub::PrepareAsyncDeleteSingleMDRaw(::grpc::ClientContext* context, const ::meringue::DeleteSingleMDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::meringue::DeleteSingleMDResponse, ::meringue::DeleteSingleMDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteSingleMD_, context, request);
}

::grpc::ClientAsyncResponseReader< ::meringue::DeleteSingleMDResponse>* MeringueService::Stub::AsyncDeleteSingleMDRaw(::grpc::ClientContext* context, const ::meringue::DeleteSingleMDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteSingleMDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MeringueService::Stub::UpdateCache(::grpc::ClientContext* context, const ::meringue::UpdateCacheRequest& request, ::meringue::UpdateCacheResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::meringue::UpdateCacheRequest, ::meringue::UpdateCacheResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateCache_, context, request, response);
}

void MeringueService::Stub::async::UpdateCache(::grpc::ClientContext* context, const ::meringue::UpdateCacheRequest* request, ::meringue::UpdateCacheResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::meringue::UpdateCacheRequest, ::meringue::UpdateCacheResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateCache_, context, request, response, std::move(f));
}

void MeringueService::Stub::async::UpdateCache(::grpc::ClientContext* context, const ::meringue::UpdateCacheRequest* request, ::meringue::UpdateCacheResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateCache_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::meringue::UpdateCacheResponse>* MeringueService::Stub::PrepareAsyncUpdateCacheRaw(::grpc::ClientContext* context, const ::meringue::UpdateCacheRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::meringue::UpdateCacheResponse, ::meringue::UpdateCacheRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateCache_, context, request);
}

::grpc::ClientAsyncResponseReader< ::meringue::UpdateCacheResponse>* MeringueService::Stub::AsyncUpdateCacheRaw(::grpc::ClientContext* context, const ::meringue::UpdateCacheRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateCacheRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MeringueService::Stub::UpdateSizeAndEvict(::grpc::ClientContext* context, const ::meringue::EvictionRequest& request, ::meringue::EvictionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::meringue::EvictionRequest, ::meringue::EvictionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateSizeAndEvict_, context, request, response);
}

void MeringueService::Stub::async::UpdateSizeAndEvict(::grpc::ClientContext* context, const ::meringue::EvictionRequest* request, ::meringue::EvictionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::meringue::EvictionRequest, ::meringue::EvictionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSizeAndEvict_, context, request, response, std::move(f));
}

void MeringueService::Stub::async::UpdateSizeAndEvict(::grpc::ClientContext* context, const ::meringue::EvictionRequest* request, ::meringue::EvictionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSizeAndEvict_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::meringue::EvictionResponse>* MeringueService::Stub::PrepareAsyncUpdateSizeAndEvictRaw(::grpc::ClientContext* context, const ::meringue::EvictionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::meringue::EvictionResponse, ::meringue::EvictionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateSizeAndEvict_, context, request);
}

::grpc::ClientAsyncResponseReader< ::meringue::EvictionResponse>* MeringueService::Stub::AsyncUpdateSizeAndEvictRaw(::grpc::ClientContext* context, const ::meringue::EvictionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateSizeAndEvictRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MeringueService::Stub::RunGC(::grpc::ClientContext* context, const ::meringue::GCRequest& request, ::meringue::GCResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::meringue::GCRequest, ::meringue::GCResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RunGC_, context, request, response);
}

void MeringueService::Stub::async::RunGC(::grpc::ClientContext* context, const ::meringue::GCRequest* request, ::meringue::GCResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::meringue::GCRequest, ::meringue::GCResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RunGC_, context, request, response, std::move(f));
}

void MeringueService::Stub::async::RunGC(::grpc::ClientContext* context, const ::meringue::GCRequest* request, ::meringue::GCResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RunGC_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::meringue::GCResponse>* MeringueService::Stub::PrepareAsyncRunGCRaw(::grpc::ClientContext* context, const ::meringue::GCRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::meringue::GCResponse, ::meringue::GCRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RunGC_, context, request);
}

::grpc::ClientAsyncResponseReader< ::meringue::GCResponse>* MeringueService::Stub::AsyncRunGCRaw(::grpc::ClientContext* context, const ::meringue::GCRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRunGCRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MeringueService::Stub::SortAndWrite(::grpc::ClientContext* context, const ::meringue::SortAndWriteRequest& request, ::meringue::SortAndWriteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::meringue::SortAndWriteRequest, ::meringue::SortAndWriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SortAndWrite_, context, request, response);
}

void MeringueService::Stub::async::SortAndWrite(::grpc::ClientContext* context, const ::meringue::SortAndWriteRequest* request, ::meringue::SortAndWriteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::meringue::SortAndWriteRequest, ::meringue::SortAndWriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SortAndWrite_, context, request, response, std::move(f));
}

void MeringueService::Stub::async::SortAndWrite(::grpc::ClientContext* context, const ::meringue::SortAndWriteRequest* request, ::meringue::SortAndWriteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SortAndWrite_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::meringue::SortAndWriteResponse>* MeringueService::Stub::PrepareAsyncSortAndWriteRaw(::grpc::ClientContext* context, const ::meringue::SortAndWriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::meringue::SortAndWriteResponse, ::meringue::SortAndWriteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SortAndWrite_, context, request);
}

::grpc::ClientAsyncResponseReader< ::meringue::SortAndWriteResponse>* MeringueService::Stub::AsyncSortAndWriteRaw(::grpc::ClientContext* context, const ::meringue::SortAndWriteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSortAndWriteRaw(context, request, cq);
  result->StartCall();
  return result;
}

MeringueService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MeringueService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MeringueService::Service, ::meringue::InitializeRequest, ::meringue::InitializeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MeringueService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::meringue::InitializeRequest* req,
             ::meringue::InitializeResponse* resp) {
               return service->Initialize(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MeringueService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MeringueService::Service, ::meringue::PutSingleMDRequest, ::meringue::PutSingleMDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MeringueService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::meringue::PutSingleMDRequest* req,
             ::meringue::PutSingleMDResponse* resp) {
               return service->PutSingleMD(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MeringueService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MeringueService::Service, ::meringue::GetSingleMDRequest, ::meringue::GetSingleMDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MeringueService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::meringue::GetSingleMDRequest* req,
             ::meringue::GetSingleMDResponse* resp) {
               return service->GetSingleMD(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MeringueService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MeringueService::Service, ::meringue::DeleteSingleMDRequest, ::meringue::DeleteSingleMDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MeringueService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::meringue::DeleteSingleMDRequest* req,
             ::meringue::DeleteSingleMDResponse* resp) {
               return service->DeleteSingleMD(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MeringueService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MeringueService::Service, ::meringue::UpdateCacheRequest, ::meringue::UpdateCacheResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MeringueService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::meringue::UpdateCacheRequest* req,
             ::meringue::UpdateCacheResponse* resp) {
               return service->UpdateCache(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MeringueService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MeringueService::Service, ::meringue::EvictionRequest, ::meringue::EvictionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MeringueService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::meringue::EvictionRequest* req,
             ::meringue::EvictionResponse* resp) {
               return service->UpdateSizeAndEvict(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MeringueService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MeringueService::Service, ::meringue::GCRequest, ::meringue::GCResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MeringueService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::meringue::GCRequest* req,
             ::meringue::GCResponse* resp) {
               return service->RunGC(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MeringueService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MeringueService::Service, ::meringue::SortAndWriteRequest, ::meringue::SortAndWriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MeringueService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::meringue::SortAndWriteRequest* req,
             ::meringue::SortAndWriteResponse* resp) {
               return service->SortAndWrite(ctx, req, resp);
             }, this)));
}

MeringueService::Service::~Service() {
}

::grpc::Status MeringueService::Service::Initialize(::grpc::ServerContext* context, const ::meringue::InitializeRequest* request, ::meringue::InitializeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MeringueService::Service::PutSingleMD(::grpc::ServerContext* context, const ::meringue::PutSingleMDRequest* request, ::meringue::PutSingleMDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MeringueService::Service::GetSingleMD(::grpc::ServerContext* context, const ::meringue::GetSingleMDRequest* request, ::meringue::GetSingleMDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MeringueService::Service::DeleteSingleMD(::grpc::ServerContext* context, const ::meringue::DeleteSingleMDRequest* request, ::meringue::DeleteSingleMDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MeringueService::Service::UpdateCache(::grpc::ServerContext* context, const ::meringue::UpdateCacheRequest* request, ::meringue::UpdateCacheResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MeringueService::Service::UpdateSizeAndEvict(::grpc::ServerContext* context, const ::meringue::EvictionRequest* request, ::meringue::EvictionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MeringueService::Service::RunGC(::grpc::ServerContext* context, const ::meringue::GCRequest* request, ::meringue::GCResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MeringueService::Service::SortAndWrite(::grpc::ServerContext* context, const ::meringue::SortAndWriteRequest* request, ::meringue::SortAndWriteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace meringue

