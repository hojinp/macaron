// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cache_engine.proto

#include "cache_engine.pb.h"
#include "cache_engine.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace cacheengine {

static const char* CacheEngineService_method_names[] = {
  "/cacheengine.CacheEngineService/Put",
  "/cacheengine.CacheEngineService/Get",
  "/cacheengine.CacheEngineService/Delete",
  "/cacheengine.CacheEngineService/Initialize",
  "/cacheengine.CacheEngineService/FlushLog",
  "/cacheengine.CacheEngineService/FlushLatencyLog",
  "/cacheengine.CacheEngineService/ClearDRAMCache",
  "/cacheengine.CacheEngineService/Prefetch",
  "/cacheengine.CacheEngineService/Stop",
};

std::unique_ptr< CacheEngineService::Stub> CacheEngineService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CacheEngineService::Stub> stub(new CacheEngineService::Stub(channel, options));
  return stub;
}

CacheEngineService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Put_(CacheEngineService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_(CacheEngineService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(CacheEngineService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Initialize_(CacheEngineService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FlushLog_(CacheEngineService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FlushLatencyLog_(CacheEngineService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClearDRAMCache_(CacheEngineService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Prefetch_(CacheEngineService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Stop_(CacheEngineService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CacheEngineService::Stub::Put(::grpc::ClientContext* context, const ::cacheengine::PutRequest& request, ::cacheengine::PutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cacheengine::PutRequest, ::cacheengine::PutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Put_, context, request, response);
}

void CacheEngineService::Stub::async::Put(::grpc::ClientContext* context, const ::cacheengine::PutRequest* request, ::cacheengine::PutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cacheengine::PutRequest, ::cacheengine::PutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, std::move(f));
}

void CacheEngineService::Stub::async::Put(::grpc::ClientContext* context, const ::cacheengine::PutRequest* request, ::cacheengine::PutResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cacheengine::PutResponse>* CacheEngineService::Stub::PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::cacheengine::PutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cacheengine::PutResponse, ::cacheengine::PutRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Put_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cacheengine::PutResponse>* CacheEngineService::Stub::AsyncPutRaw(::grpc::ClientContext* context, const ::cacheengine::PutRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CacheEngineService::Stub::Get(::grpc::ClientContext* context, const ::cacheengine::GetRequest& request, ::cacheengine::GetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cacheengine::GetRequest, ::cacheengine::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_, context, request, response);
}

void CacheEngineService::Stub::async::Get(::grpc::ClientContext* context, const ::cacheengine::GetRequest* request, ::cacheengine::GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cacheengine::GetRequest, ::cacheengine::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void CacheEngineService::Stub::async::Get(::grpc::ClientContext* context, const ::cacheengine::GetRequest* request, ::cacheengine::GetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cacheengine::GetResponse>* CacheEngineService::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::cacheengine::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cacheengine::GetResponse, ::cacheengine::GetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cacheengine::GetResponse>* CacheEngineService::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::cacheengine::GetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CacheEngineService::Stub::Delete(::grpc::ClientContext* context, const ::cacheengine::DeleteRequest& request, ::cacheengine::DeleteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cacheengine::DeleteRequest, ::cacheengine::DeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void CacheEngineService::Stub::async::Delete(::grpc::ClientContext* context, const ::cacheengine::DeleteRequest* request, ::cacheengine::DeleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cacheengine::DeleteRequest, ::cacheengine::DeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void CacheEngineService::Stub::async::Delete(::grpc::ClientContext* context, const ::cacheengine::DeleteRequest* request, ::cacheengine::DeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cacheengine::DeleteResponse>* CacheEngineService::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::cacheengine::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cacheengine::DeleteResponse, ::cacheengine::DeleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Delete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cacheengine::DeleteResponse>* CacheEngineService::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::cacheengine::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CacheEngineService::Stub::Initialize(::grpc::ClientContext* context, const ::cacheengine::InitializeRequest& request, ::cacheengine::InitializeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cacheengine::InitializeRequest, ::cacheengine::InitializeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Initialize_, context, request, response);
}

void CacheEngineService::Stub::async::Initialize(::grpc::ClientContext* context, const ::cacheengine::InitializeRequest* request, ::cacheengine::InitializeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cacheengine::InitializeRequest, ::cacheengine::InitializeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Initialize_, context, request, response, std::move(f));
}

void CacheEngineService::Stub::async::Initialize(::grpc::ClientContext* context, const ::cacheengine::InitializeRequest* request, ::cacheengine::InitializeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Initialize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cacheengine::InitializeResponse>* CacheEngineService::Stub::PrepareAsyncInitializeRaw(::grpc::ClientContext* context, const ::cacheengine::InitializeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cacheengine::InitializeResponse, ::cacheengine::InitializeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Initialize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cacheengine::InitializeResponse>* CacheEngineService::Stub::AsyncInitializeRaw(::grpc::ClientContext* context, const ::cacheengine::InitializeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitializeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CacheEngineService::Stub::FlushLog(::grpc::ClientContext* context, const ::cacheengine::FlushLogRequest& request, ::cacheengine::FlushLogResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cacheengine::FlushLogRequest, ::cacheengine::FlushLogResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FlushLog_, context, request, response);
}

void CacheEngineService::Stub::async::FlushLog(::grpc::ClientContext* context, const ::cacheengine::FlushLogRequest* request, ::cacheengine::FlushLogResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cacheengine::FlushLogRequest, ::cacheengine::FlushLogResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FlushLog_, context, request, response, std::move(f));
}

void CacheEngineService::Stub::async::FlushLog(::grpc::ClientContext* context, const ::cacheengine::FlushLogRequest* request, ::cacheengine::FlushLogResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FlushLog_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cacheengine::FlushLogResponse>* CacheEngineService::Stub::PrepareAsyncFlushLogRaw(::grpc::ClientContext* context, const ::cacheengine::FlushLogRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cacheengine::FlushLogResponse, ::cacheengine::FlushLogRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FlushLog_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cacheengine::FlushLogResponse>* CacheEngineService::Stub::AsyncFlushLogRaw(::grpc::ClientContext* context, const ::cacheengine::FlushLogRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFlushLogRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CacheEngineService::Stub::FlushLatencyLog(::grpc::ClientContext* context, const ::cacheengine::FlushLatencyLogRequest& request, ::cacheengine::FlushLatencyLogResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cacheengine::FlushLatencyLogRequest, ::cacheengine::FlushLatencyLogResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FlushLatencyLog_, context, request, response);
}

void CacheEngineService::Stub::async::FlushLatencyLog(::grpc::ClientContext* context, const ::cacheengine::FlushLatencyLogRequest* request, ::cacheengine::FlushLatencyLogResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cacheengine::FlushLatencyLogRequest, ::cacheengine::FlushLatencyLogResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FlushLatencyLog_, context, request, response, std::move(f));
}

void CacheEngineService::Stub::async::FlushLatencyLog(::grpc::ClientContext* context, const ::cacheengine::FlushLatencyLogRequest* request, ::cacheengine::FlushLatencyLogResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FlushLatencyLog_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cacheengine::FlushLatencyLogResponse>* CacheEngineService::Stub::PrepareAsyncFlushLatencyLogRaw(::grpc::ClientContext* context, const ::cacheengine::FlushLatencyLogRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cacheengine::FlushLatencyLogResponse, ::cacheengine::FlushLatencyLogRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FlushLatencyLog_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cacheengine::FlushLatencyLogResponse>* CacheEngineService::Stub::AsyncFlushLatencyLogRaw(::grpc::ClientContext* context, const ::cacheengine::FlushLatencyLogRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFlushLatencyLogRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CacheEngineService::Stub::ClearDRAMCache(::grpc::ClientContext* context, const ::cacheengine::ClearDRAMCacheRequest& request, ::cacheengine::ClearDRAMCacheResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cacheengine::ClearDRAMCacheRequest, ::cacheengine::ClearDRAMCacheResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ClearDRAMCache_, context, request, response);
}

void CacheEngineService::Stub::async::ClearDRAMCache(::grpc::ClientContext* context, const ::cacheengine::ClearDRAMCacheRequest* request, ::cacheengine::ClearDRAMCacheResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cacheengine::ClearDRAMCacheRequest, ::cacheengine::ClearDRAMCacheResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearDRAMCache_, context, request, response, std::move(f));
}

void CacheEngineService::Stub::async::ClearDRAMCache(::grpc::ClientContext* context, const ::cacheengine::ClearDRAMCacheRequest* request, ::cacheengine::ClearDRAMCacheResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearDRAMCache_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cacheengine::ClearDRAMCacheResponse>* CacheEngineService::Stub::PrepareAsyncClearDRAMCacheRaw(::grpc::ClientContext* context, const ::cacheengine::ClearDRAMCacheRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cacheengine::ClearDRAMCacheResponse, ::cacheengine::ClearDRAMCacheRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ClearDRAMCache_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cacheengine::ClearDRAMCacheResponse>* CacheEngineService::Stub::AsyncClearDRAMCacheRaw(::grpc::ClientContext* context, const ::cacheengine::ClearDRAMCacheRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClearDRAMCacheRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CacheEngineService::Stub::Prefetch(::grpc::ClientContext* context, const ::cacheengine::PrefetchRequest& request, ::cacheengine::PrefetchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cacheengine::PrefetchRequest, ::cacheengine::PrefetchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Prefetch_, context, request, response);
}

void CacheEngineService::Stub::async::Prefetch(::grpc::ClientContext* context, const ::cacheengine::PrefetchRequest* request, ::cacheengine::PrefetchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cacheengine::PrefetchRequest, ::cacheengine::PrefetchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Prefetch_, context, request, response, std::move(f));
}

void CacheEngineService::Stub::async::Prefetch(::grpc::ClientContext* context, const ::cacheengine::PrefetchRequest* request, ::cacheengine::PrefetchResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Prefetch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cacheengine::PrefetchResponse>* CacheEngineService::Stub::PrepareAsyncPrefetchRaw(::grpc::ClientContext* context, const ::cacheengine::PrefetchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cacheengine::PrefetchResponse, ::cacheengine::PrefetchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Prefetch_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cacheengine::PrefetchResponse>* CacheEngineService::Stub::AsyncPrefetchRaw(::grpc::ClientContext* context, const ::cacheengine::PrefetchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPrefetchRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CacheEngineService::Stub::Stop(::grpc::ClientContext* context, const ::cacheengine::StopRequest& request, ::cacheengine::StopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cacheengine::StopRequest, ::cacheengine::StopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Stop_, context, request, response);
}

void CacheEngineService::Stub::async::Stop(::grpc::ClientContext* context, const ::cacheengine::StopRequest* request, ::cacheengine::StopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cacheengine::StopRequest, ::cacheengine::StopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void CacheEngineService::Stub::async::Stop(::grpc::ClientContext* context, const ::cacheengine::StopRequest* request, ::cacheengine::StopResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cacheengine::StopResponse>* CacheEngineService::Stub::PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::cacheengine::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cacheengine::StopResponse, ::cacheengine::StopRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Stop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cacheengine::StopResponse>* CacheEngineService::Stub::AsyncStopRaw(::grpc::ClientContext* context, const ::cacheengine::StopRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopRaw(context, request, cq);
  result->StartCall();
  return result;
}

CacheEngineService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CacheEngineService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CacheEngineService::Service, ::cacheengine::PutRequest, ::cacheengine::PutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CacheEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cacheengine::PutRequest* req,
             ::cacheengine::PutResponse* resp) {
               return service->Put(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CacheEngineService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CacheEngineService::Service, ::cacheengine::GetRequest, ::cacheengine::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CacheEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cacheengine::GetRequest* req,
             ::cacheengine::GetResponse* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CacheEngineService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CacheEngineService::Service, ::cacheengine::DeleteRequest, ::cacheengine::DeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CacheEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cacheengine::DeleteRequest* req,
             ::cacheengine::DeleteResponse* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CacheEngineService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CacheEngineService::Service, ::cacheengine::InitializeRequest, ::cacheengine::InitializeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CacheEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cacheengine::InitializeRequest* req,
             ::cacheengine::InitializeResponse* resp) {
               return service->Initialize(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CacheEngineService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CacheEngineService::Service, ::cacheengine::FlushLogRequest, ::cacheengine::FlushLogResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CacheEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cacheengine::FlushLogRequest* req,
             ::cacheengine::FlushLogResponse* resp) {
               return service->FlushLog(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CacheEngineService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CacheEngineService::Service, ::cacheengine::FlushLatencyLogRequest, ::cacheengine::FlushLatencyLogResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CacheEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cacheengine::FlushLatencyLogRequest* req,
             ::cacheengine::FlushLatencyLogResponse* resp) {
               return service->FlushLatencyLog(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CacheEngineService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CacheEngineService::Service, ::cacheengine::ClearDRAMCacheRequest, ::cacheengine::ClearDRAMCacheResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CacheEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cacheengine::ClearDRAMCacheRequest* req,
             ::cacheengine::ClearDRAMCacheResponse* resp) {
               return service->ClearDRAMCache(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CacheEngineService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CacheEngineService::Service, ::cacheengine::PrefetchRequest, ::cacheengine::PrefetchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CacheEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cacheengine::PrefetchRequest* req,
             ::cacheengine::PrefetchResponse* resp) {
               return service->Prefetch(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CacheEngineService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CacheEngineService::Service, ::cacheengine::StopRequest, ::cacheengine::StopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CacheEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cacheengine::StopRequest* req,
             ::cacheengine::StopResponse* resp) {
               return service->Stop(ctx, req, resp);
             }, this)));
}

CacheEngineService::Service::~Service() {
}

::grpc::Status CacheEngineService::Service::Put(::grpc::ServerContext* context, const ::cacheengine::PutRequest* request, ::cacheengine::PutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CacheEngineService::Service::Get(::grpc::ServerContext* context, const ::cacheengine::GetRequest* request, ::cacheengine::GetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CacheEngineService::Service::Delete(::grpc::ServerContext* context, const ::cacheengine::DeleteRequest* request, ::cacheengine::DeleteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CacheEngineService::Service::Initialize(::grpc::ServerContext* context, const ::cacheengine::InitializeRequest* request, ::cacheengine::InitializeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CacheEngineService::Service::FlushLog(::grpc::ServerContext* context, const ::cacheengine::FlushLogRequest* request, ::cacheengine::FlushLogResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CacheEngineService::Service::FlushLatencyLog(::grpc::ServerContext* context, const ::cacheengine::FlushLatencyLogRequest* request, ::cacheengine::FlushLatencyLogResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CacheEngineService::Service::ClearDRAMCache(::grpc::ServerContext* context, const ::cacheengine::ClearDRAMCacheRequest* request, ::cacheengine::ClearDRAMCacheResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CacheEngineService::Service::Prefetch(::grpc::ServerContext* context, const ::cacheengine::PrefetchRequest* request, ::cacheengine::PrefetchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CacheEngineService::Service::Stop(::grpc::ServerContext* context, const ::cacheengine::StopRequest* request, ::cacheengine::StopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cacheengine

