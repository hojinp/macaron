// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cache_engine.proto
#ifndef GRPC_cache_5fengine_2eproto__INCLUDED
#define GRPC_cache_5fengine_2eproto__INCLUDED

#include "cache_engine.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace cacheengine {

// Service definition
class CacheEngineService final {
 public:
  static constexpr char const* service_full_name() {
    return "cacheengine.CacheEngineService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Put(::grpc::ClientContext* context, const ::cacheengine::PutRequest& request, ::cacheengine::PutResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::PutResponse>> AsyncPut(::grpc::ClientContext* context, const ::cacheengine::PutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::PutResponse>>(AsyncPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::PutResponse>> PrepareAsyncPut(::grpc::ClientContext* context, const ::cacheengine::PutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::PutResponse>>(PrepareAsyncPutRaw(context, request, cq));
    }
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::cacheengine::GetRequest& request, ::cacheengine::GetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::GetResponse>> AsyncGet(::grpc::ClientContext* context, const ::cacheengine::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::GetResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::GetResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::cacheengine::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::GetResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::cacheengine::DeleteRequest& request, ::cacheengine::DeleteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::DeleteResponse>> AsyncDelete(::grpc::ClientContext* context, const ::cacheengine::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::DeleteResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::DeleteResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::cacheengine::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::DeleteResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    virtual ::grpc::Status Initialize(::grpc::ClientContext* context, const ::cacheengine::InitializeRequest& request, ::cacheengine::InitializeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::InitializeResponse>> AsyncInitialize(::grpc::ClientContext* context, const ::cacheengine::InitializeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::InitializeResponse>>(AsyncInitializeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::InitializeResponse>> PrepareAsyncInitialize(::grpc::ClientContext* context, const ::cacheengine::InitializeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::InitializeResponse>>(PrepareAsyncInitializeRaw(context, request, cq));
    }
    virtual ::grpc::Status FlushLog(::grpc::ClientContext* context, const ::cacheengine::FlushLogRequest& request, ::cacheengine::FlushLogResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::FlushLogResponse>> AsyncFlushLog(::grpc::ClientContext* context, const ::cacheengine::FlushLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::FlushLogResponse>>(AsyncFlushLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::FlushLogResponse>> PrepareAsyncFlushLog(::grpc::ClientContext* context, const ::cacheengine::FlushLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::FlushLogResponse>>(PrepareAsyncFlushLogRaw(context, request, cq));
    }
    virtual ::grpc::Status FlushLatencyLog(::grpc::ClientContext* context, const ::cacheengine::FlushLatencyLogRequest& request, ::cacheengine::FlushLatencyLogResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::FlushLatencyLogResponse>> AsyncFlushLatencyLog(::grpc::ClientContext* context, const ::cacheengine::FlushLatencyLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::FlushLatencyLogResponse>>(AsyncFlushLatencyLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::FlushLatencyLogResponse>> PrepareAsyncFlushLatencyLog(::grpc::ClientContext* context, const ::cacheengine::FlushLatencyLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::FlushLatencyLogResponse>>(PrepareAsyncFlushLatencyLogRaw(context, request, cq));
    }
    virtual ::grpc::Status ClearDRAMCache(::grpc::ClientContext* context, const ::cacheengine::ClearDRAMCacheRequest& request, ::cacheengine::ClearDRAMCacheResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::ClearDRAMCacheResponse>> AsyncClearDRAMCache(::grpc::ClientContext* context, const ::cacheengine::ClearDRAMCacheRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::ClearDRAMCacheResponse>>(AsyncClearDRAMCacheRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::ClearDRAMCacheResponse>> PrepareAsyncClearDRAMCache(::grpc::ClientContext* context, const ::cacheengine::ClearDRAMCacheRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::ClearDRAMCacheResponse>>(PrepareAsyncClearDRAMCacheRaw(context, request, cq));
    }
    virtual ::grpc::Status Prefetch(::grpc::ClientContext* context, const ::cacheengine::PrefetchRequest& request, ::cacheengine::PrefetchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::PrefetchResponse>> AsyncPrefetch(::grpc::ClientContext* context, const ::cacheengine::PrefetchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::PrefetchResponse>>(AsyncPrefetchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::PrefetchResponse>> PrepareAsyncPrefetch(::grpc::ClientContext* context, const ::cacheengine::PrefetchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::PrefetchResponse>>(PrepareAsyncPrefetchRaw(context, request, cq));
    }
    virtual ::grpc::Status Stop(::grpc::ClientContext* context, const ::cacheengine::StopRequest& request, ::cacheengine::StopResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::StopResponse>> AsyncStop(::grpc::ClientContext* context, const ::cacheengine::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::StopResponse>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::StopResponse>> PrepareAsyncStop(::grpc::ClientContext* context, const ::cacheengine::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::StopResponse>>(PrepareAsyncStopRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Put(::grpc::ClientContext* context, const ::cacheengine::PutRequest* request, ::cacheengine::PutResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Put(::grpc::ClientContext* context, const ::cacheengine::PutRequest* request, ::cacheengine::PutResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::cacheengine::GetRequest* request, ::cacheengine::GetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::cacheengine::GetRequest* request, ::cacheengine::GetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::cacheengine::DeleteRequest* request, ::cacheengine::DeleteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::cacheengine::DeleteRequest* request, ::cacheengine::DeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Initialize(::grpc::ClientContext* context, const ::cacheengine::InitializeRequest* request, ::cacheengine::InitializeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Initialize(::grpc::ClientContext* context, const ::cacheengine::InitializeRequest* request, ::cacheengine::InitializeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FlushLog(::grpc::ClientContext* context, const ::cacheengine::FlushLogRequest* request, ::cacheengine::FlushLogResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FlushLog(::grpc::ClientContext* context, const ::cacheengine::FlushLogRequest* request, ::cacheengine::FlushLogResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FlushLatencyLog(::grpc::ClientContext* context, const ::cacheengine::FlushLatencyLogRequest* request, ::cacheengine::FlushLatencyLogResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FlushLatencyLog(::grpc::ClientContext* context, const ::cacheengine::FlushLatencyLogRequest* request, ::cacheengine::FlushLatencyLogResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ClearDRAMCache(::grpc::ClientContext* context, const ::cacheengine::ClearDRAMCacheRequest* request, ::cacheengine::ClearDRAMCacheResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ClearDRAMCache(::grpc::ClientContext* context, const ::cacheengine::ClearDRAMCacheRequest* request, ::cacheengine::ClearDRAMCacheResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Prefetch(::grpc::ClientContext* context, const ::cacheengine::PrefetchRequest* request, ::cacheengine::PrefetchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Prefetch(::grpc::ClientContext* context, const ::cacheengine::PrefetchRequest* request, ::cacheengine::PrefetchResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Stop(::grpc::ClientContext* context, const ::cacheengine::StopRequest* request, ::cacheengine::StopResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Stop(::grpc::ClientContext* context, const ::cacheengine::StopRequest* request, ::cacheengine::StopResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::PutResponse>* AsyncPutRaw(::grpc::ClientContext* context, const ::cacheengine::PutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::PutResponse>* PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::cacheengine::PutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::GetResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::cacheengine::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::GetResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::cacheengine::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::DeleteResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::cacheengine::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::DeleteResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::cacheengine::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::InitializeResponse>* AsyncInitializeRaw(::grpc::ClientContext* context, const ::cacheengine::InitializeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::InitializeResponse>* PrepareAsyncInitializeRaw(::grpc::ClientContext* context, const ::cacheengine::InitializeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::FlushLogResponse>* AsyncFlushLogRaw(::grpc::ClientContext* context, const ::cacheengine::FlushLogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::FlushLogResponse>* PrepareAsyncFlushLogRaw(::grpc::ClientContext* context, const ::cacheengine::FlushLogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::FlushLatencyLogResponse>* AsyncFlushLatencyLogRaw(::grpc::ClientContext* context, const ::cacheengine::FlushLatencyLogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::FlushLatencyLogResponse>* PrepareAsyncFlushLatencyLogRaw(::grpc::ClientContext* context, const ::cacheengine::FlushLatencyLogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::ClearDRAMCacheResponse>* AsyncClearDRAMCacheRaw(::grpc::ClientContext* context, const ::cacheengine::ClearDRAMCacheRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::ClearDRAMCacheResponse>* PrepareAsyncClearDRAMCacheRaw(::grpc::ClientContext* context, const ::cacheengine::ClearDRAMCacheRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::PrefetchResponse>* AsyncPrefetchRaw(::grpc::ClientContext* context, const ::cacheengine::PrefetchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::PrefetchResponse>* PrepareAsyncPrefetchRaw(::grpc::ClientContext* context, const ::cacheengine::PrefetchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::StopResponse>* AsyncStopRaw(::grpc::ClientContext* context, const ::cacheengine::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cacheengine::StopResponse>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::cacheengine::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Put(::grpc::ClientContext* context, const ::cacheengine::PutRequest& request, ::cacheengine::PutResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::PutResponse>> AsyncPut(::grpc::ClientContext* context, const ::cacheengine::PutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::PutResponse>>(AsyncPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::PutResponse>> PrepareAsyncPut(::grpc::ClientContext* context, const ::cacheengine::PutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::PutResponse>>(PrepareAsyncPutRaw(context, request, cq));
    }
    ::grpc::Status Get(::grpc::ClientContext* context, const ::cacheengine::GetRequest& request, ::cacheengine::GetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::GetResponse>> AsyncGet(::grpc::ClientContext* context, const ::cacheengine::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::GetResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::GetResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::cacheengine::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::GetResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::cacheengine::DeleteRequest& request, ::cacheengine::DeleteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::DeleteResponse>> AsyncDelete(::grpc::ClientContext* context, const ::cacheengine::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::DeleteResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::DeleteResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::cacheengine::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::DeleteResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    ::grpc::Status Initialize(::grpc::ClientContext* context, const ::cacheengine::InitializeRequest& request, ::cacheengine::InitializeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::InitializeResponse>> AsyncInitialize(::grpc::ClientContext* context, const ::cacheengine::InitializeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::InitializeResponse>>(AsyncInitializeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::InitializeResponse>> PrepareAsyncInitialize(::grpc::ClientContext* context, const ::cacheengine::InitializeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::InitializeResponse>>(PrepareAsyncInitializeRaw(context, request, cq));
    }
    ::grpc::Status FlushLog(::grpc::ClientContext* context, const ::cacheengine::FlushLogRequest& request, ::cacheengine::FlushLogResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::FlushLogResponse>> AsyncFlushLog(::grpc::ClientContext* context, const ::cacheengine::FlushLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::FlushLogResponse>>(AsyncFlushLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::FlushLogResponse>> PrepareAsyncFlushLog(::grpc::ClientContext* context, const ::cacheengine::FlushLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::FlushLogResponse>>(PrepareAsyncFlushLogRaw(context, request, cq));
    }
    ::grpc::Status FlushLatencyLog(::grpc::ClientContext* context, const ::cacheengine::FlushLatencyLogRequest& request, ::cacheengine::FlushLatencyLogResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::FlushLatencyLogResponse>> AsyncFlushLatencyLog(::grpc::ClientContext* context, const ::cacheengine::FlushLatencyLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::FlushLatencyLogResponse>>(AsyncFlushLatencyLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::FlushLatencyLogResponse>> PrepareAsyncFlushLatencyLog(::grpc::ClientContext* context, const ::cacheengine::FlushLatencyLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::FlushLatencyLogResponse>>(PrepareAsyncFlushLatencyLogRaw(context, request, cq));
    }
    ::grpc::Status ClearDRAMCache(::grpc::ClientContext* context, const ::cacheengine::ClearDRAMCacheRequest& request, ::cacheengine::ClearDRAMCacheResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::ClearDRAMCacheResponse>> AsyncClearDRAMCache(::grpc::ClientContext* context, const ::cacheengine::ClearDRAMCacheRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::ClearDRAMCacheResponse>>(AsyncClearDRAMCacheRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::ClearDRAMCacheResponse>> PrepareAsyncClearDRAMCache(::grpc::ClientContext* context, const ::cacheengine::ClearDRAMCacheRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::ClearDRAMCacheResponse>>(PrepareAsyncClearDRAMCacheRaw(context, request, cq));
    }
    ::grpc::Status Prefetch(::grpc::ClientContext* context, const ::cacheengine::PrefetchRequest& request, ::cacheengine::PrefetchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::PrefetchResponse>> AsyncPrefetch(::grpc::ClientContext* context, const ::cacheengine::PrefetchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::PrefetchResponse>>(AsyncPrefetchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::PrefetchResponse>> PrepareAsyncPrefetch(::grpc::ClientContext* context, const ::cacheengine::PrefetchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::PrefetchResponse>>(PrepareAsyncPrefetchRaw(context, request, cq));
    }
    ::grpc::Status Stop(::grpc::ClientContext* context, const ::cacheengine::StopRequest& request, ::cacheengine::StopResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::StopResponse>> AsyncStop(::grpc::ClientContext* context, const ::cacheengine::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::StopResponse>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::StopResponse>> PrepareAsyncStop(::grpc::ClientContext* context, const ::cacheengine::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cacheengine::StopResponse>>(PrepareAsyncStopRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Put(::grpc::ClientContext* context, const ::cacheengine::PutRequest* request, ::cacheengine::PutResponse* response, std::function<void(::grpc::Status)>) override;
      void Put(::grpc::ClientContext* context, const ::cacheengine::PutRequest* request, ::cacheengine::PutResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Get(::grpc::ClientContext* context, const ::cacheengine::GetRequest* request, ::cacheengine::GetResponse* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::cacheengine::GetRequest* request, ::cacheengine::GetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Delete(::grpc::ClientContext* context, const ::cacheengine::DeleteRequest* request, ::cacheengine::DeleteResponse* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::cacheengine::DeleteRequest* request, ::cacheengine::DeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Initialize(::grpc::ClientContext* context, const ::cacheengine::InitializeRequest* request, ::cacheengine::InitializeResponse* response, std::function<void(::grpc::Status)>) override;
      void Initialize(::grpc::ClientContext* context, const ::cacheengine::InitializeRequest* request, ::cacheengine::InitializeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FlushLog(::grpc::ClientContext* context, const ::cacheengine::FlushLogRequest* request, ::cacheengine::FlushLogResponse* response, std::function<void(::grpc::Status)>) override;
      void FlushLog(::grpc::ClientContext* context, const ::cacheengine::FlushLogRequest* request, ::cacheengine::FlushLogResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FlushLatencyLog(::grpc::ClientContext* context, const ::cacheengine::FlushLatencyLogRequest* request, ::cacheengine::FlushLatencyLogResponse* response, std::function<void(::grpc::Status)>) override;
      void FlushLatencyLog(::grpc::ClientContext* context, const ::cacheengine::FlushLatencyLogRequest* request, ::cacheengine::FlushLatencyLogResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ClearDRAMCache(::grpc::ClientContext* context, const ::cacheengine::ClearDRAMCacheRequest* request, ::cacheengine::ClearDRAMCacheResponse* response, std::function<void(::grpc::Status)>) override;
      void ClearDRAMCache(::grpc::ClientContext* context, const ::cacheengine::ClearDRAMCacheRequest* request, ::cacheengine::ClearDRAMCacheResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Prefetch(::grpc::ClientContext* context, const ::cacheengine::PrefetchRequest* request, ::cacheengine::PrefetchResponse* response, std::function<void(::grpc::Status)>) override;
      void Prefetch(::grpc::ClientContext* context, const ::cacheengine::PrefetchRequest* request, ::cacheengine::PrefetchResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Stop(::grpc::ClientContext* context, const ::cacheengine::StopRequest* request, ::cacheengine::StopResponse* response, std::function<void(::grpc::Status)>) override;
      void Stop(::grpc::ClientContext* context, const ::cacheengine::StopRequest* request, ::cacheengine::StopResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cacheengine::PutResponse>* AsyncPutRaw(::grpc::ClientContext* context, const ::cacheengine::PutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cacheengine::PutResponse>* PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::cacheengine::PutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cacheengine::GetResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::cacheengine::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cacheengine::GetResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::cacheengine::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cacheengine::DeleteResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::cacheengine::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cacheengine::DeleteResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::cacheengine::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cacheengine::InitializeResponse>* AsyncInitializeRaw(::grpc::ClientContext* context, const ::cacheengine::InitializeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cacheengine::InitializeResponse>* PrepareAsyncInitializeRaw(::grpc::ClientContext* context, const ::cacheengine::InitializeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cacheengine::FlushLogResponse>* AsyncFlushLogRaw(::grpc::ClientContext* context, const ::cacheengine::FlushLogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cacheengine::FlushLogResponse>* PrepareAsyncFlushLogRaw(::grpc::ClientContext* context, const ::cacheengine::FlushLogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cacheengine::FlushLatencyLogResponse>* AsyncFlushLatencyLogRaw(::grpc::ClientContext* context, const ::cacheengine::FlushLatencyLogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cacheengine::FlushLatencyLogResponse>* PrepareAsyncFlushLatencyLogRaw(::grpc::ClientContext* context, const ::cacheengine::FlushLatencyLogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cacheengine::ClearDRAMCacheResponse>* AsyncClearDRAMCacheRaw(::grpc::ClientContext* context, const ::cacheengine::ClearDRAMCacheRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cacheengine::ClearDRAMCacheResponse>* PrepareAsyncClearDRAMCacheRaw(::grpc::ClientContext* context, const ::cacheengine::ClearDRAMCacheRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cacheengine::PrefetchResponse>* AsyncPrefetchRaw(::grpc::ClientContext* context, const ::cacheengine::PrefetchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cacheengine::PrefetchResponse>* PrepareAsyncPrefetchRaw(::grpc::ClientContext* context, const ::cacheengine::PrefetchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cacheengine::StopResponse>* AsyncStopRaw(::grpc::ClientContext* context, const ::cacheengine::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cacheengine::StopResponse>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::cacheengine::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Put_;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
    const ::grpc::internal::RpcMethod rpcmethod_Initialize_;
    const ::grpc::internal::RpcMethod rpcmethod_FlushLog_;
    const ::grpc::internal::RpcMethod rpcmethod_FlushLatencyLog_;
    const ::grpc::internal::RpcMethod rpcmethod_ClearDRAMCache_;
    const ::grpc::internal::RpcMethod rpcmethod_Prefetch_;
    const ::grpc::internal::RpcMethod rpcmethod_Stop_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Put(::grpc::ServerContext* context, const ::cacheengine::PutRequest* request, ::cacheengine::PutResponse* response);
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::cacheengine::GetRequest* request, ::cacheengine::GetResponse* response);
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::cacheengine::DeleteRequest* request, ::cacheengine::DeleteResponse* response);
    virtual ::grpc::Status Initialize(::grpc::ServerContext* context, const ::cacheengine::InitializeRequest* request, ::cacheengine::InitializeResponse* response);
    virtual ::grpc::Status FlushLog(::grpc::ServerContext* context, const ::cacheengine::FlushLogRequest* request, ::cacheengine::FlushLogResponse* response);
    virtual ::grpc::Status FlushLatencyLog(::grpc::ServerContext* context, const ::cacheengine::FlushLatencyLogRequest* request, ::cacheengine::FlushLatencyLogResponse* response);
    virtual ::grpc::Status ClearDRAMCache(::grpc::ServerContext* context, const ::cacheengine::ClearDRAMCacheRequest* request, ::cacheengine::ClearDRAMCacheResponse* response);
    virtual ::grpc::Status Prefetch(::grpc::ServerContext* context, const ::cacheengine::PrefetchRequest* request, ::cacheengine::PrefetchResponse* response);
    virtual ::grpc::Status Stop(::grpc::ServerContext* context, const ::cacheengine::StopRequest* request, ::cacheengine::StopResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Put() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::cacheengine::PutRequest* /*request*/, ::cacheengine::PutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPut(::grpc::ServerContext* context, ::cacheengine::PutRequest* request, ::grpc::ServerAsyncResponseWriter< ::cacheengine::PutResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::cacheengine::GetRequest* /*request*/, ::cacheengine::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::cacheengine::GetRequest* request, ::grpc::ServerAsyncResponseWriter< ::cacheengine::GetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::cacheengine::DeleteRequest* /*request*/, ::cacheengine::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::cacheengine::DeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::cacheengine::DeleteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Initialize() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* /*context*/, const ::cacheengine::InitializeRequest* /*request*/, ::cacheengine::InitializeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitialize(::grpc::ServerContext* context, ::cacheengine::InitializeRequest* request, ::grpc::ServerAsyncResponseWriter< ::cacheengine::InitializeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FlushLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FlushLog() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_FlushLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FlushLog(::grpc::ServerContext* /*context*/, const ::cacheengine::FlushLogRequest* /*request*/, ::cacheengine::FlushLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFlushLog(::grpc::ServerContext* context, ::cacheengine::FlushLogRequest* request, ::grpc::ServerAsyncResponseWriter< ::cacheengine::FlushLogResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FlushLatencyLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FlushLatencyLog() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_FlushLatencyLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FlushLatencyLog(::grpc::ServerContext* /*context*/, const ::cacheengine::FlushLatencyLogRequest* /*request*/, ::cacheengine::FlushLatencyLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFlushLatencyLog(::grpc::ServerContext* context, ::cacheengine::FlushLatencyLogRequest* request, ::grpc::ServerAsyncResponseWriter< ::cacheengine::FlushLatencyLogResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ClearDRAMCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ClearDRAMCache() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ClearDRAMCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearDRAMCache(::grpc::ServerContext* /*context*/, const ::cacheengine::ClearDRAMCacheRequest* /*request*/, ::cacheengine::ClearDRAMCacheResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearDRAMCache(::grpc::ServerContext* context, ::cacheengine::ClearDRAMCacheRequest* request, ::grpc::ServerAsyncResponseWriter< ::cacheengine::ClearDRAMCacheResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Prefetch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Prefetch() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_Prefetch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prefetch(::grpc::ServerContext* /*context*/, const ::cacheengine::PrefetchRequest* /*request*/, ::cacheengine::PrefetchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrefetch(::grpc::ServerContext* context, ::cacheengine::PrefetchRequest* request, ::grpc::ServerAsyncResponseWriter< ::cacheengine::PrefetchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Stop() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::cacheengine::StopRequest* /*request*/, ::cacheengine::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::cacheengine::StopRequest* request, ::grpc::ServerAsyncResponseWriter< ::cacheengine::StopResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Put<WithAsyncMethod_Get<WithAsyncMethod_Delete<WithAsyncMethod_Initialize<WithAsyncMethod_FlushLog<WithAsyncMethod_FlushLatencyLog<WithAsyncMethod_ClearDRAMCache<WithAsyncMethod_Prefetch<WithAsyncMethod_Stop<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Put() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::cacheengine::PutRequest, ::cacheengine::PutResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cacheengine::PutRequest* request, ::cacheengine::PutResponse* response) { return this->Put(context, request, response); }));}
    void SetMessageAllocatorFor_Put(
        ::grpc::MessageAllocator< ::cacheengine::PutRequest, ::cacheengine::PutResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cacheengine::PutRequest, ::cacheengine::PutResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::cacheengine::PutRequest* /*request*/, ::cacheengine::PutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Put(
      ::grpc::CallbackServerContext* /*context*/, const ::cacheengine::PutRequest* /*request*/, ::cacheengine::PutResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Get() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::cacheengine::GetRequest, ::cacheengine::GetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cacheengine::GetRequest* request, ::cacheengine::GetResponse* response) { return this->Get(context, request, response); }));}
    void SetMessageAllocatorFor_Get(
        ::grpc::MessageAllocator< ::cacheengine::GetRequest, ::cacheengine::GetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cacheengine::GetRequest, ::cacheengine::GetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::cacheengine::GetRequest* /*request*/, ::cacheengine::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::cacheengine::GetRequest* /*request*/, ::cacheengine::GetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Delete() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::cacheengine::DeleteRequest, ::cacheengine::DeleteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cacheengine::DeleteRequest* request, ::cacheengine::DeleteResponse* response) { return this->Delete(context, request, response); }));}
    void SetMessageAllocatorFor_Delete(
        ::grpc::MessageAllocator< ::cacheengine::DeleteRequest, ::cacheengine::DeleteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cacheengine::DeleteRequest, ::cacheengine::DeleteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::cacheengine::DeleteRequest* /*request*/, ::cacheengine::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::cacheengine::DeleteRequest* /*request*/, ::cacheengine::DeleteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Initialize() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::cacheengine::InitializeRequest, ::cacheengine::InitializeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cacheengine::InitializeRequest* request, ::cacheengine::InitializeResponse* response) { return this->Initialize(context, request, response); }));}
    void SetMessageAllocatorFor_Initialize(
        ::grpc::MessageAllocator< ::cacheengine::InitializeRequest, ::cacheengine::InitializeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cacheengine::InitializeRequest, ::cacheengine::InitializeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* /*context*/, const ::cacheengine::InitializeRequest* /*request*/, ::cacheengine::InitializeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Initialize(
      ::grpc::CallbackServerContext* /*context*/, const ::cacheengine::InitializeRequest* /*request*/, ::cacheengine::InitializeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FlushLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FlushLog() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::cacheengine::FlushLogRequest, ::cacheengine::FlushLogResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cacheengine::FlushLogRequest* request, ::cacheengine::FlushLogResponse* response) { return this->FlushLog(context, request, response); }));}
    void SetMessageAllocatorFor_FlushLog(
        ::grpc::MessageAllocator< ::cacheengine::FlushLogRequest, ::cacheengine::FlushLogResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cacheengine::FlushLogRequest, ::cacheengine::FlushLogResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FlushLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FlushLog(::grpc::ServerContext* /*context*/, const ::cacheengine::FlushLogRequest* /*request*/, ::cacheengine::FlushLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FlushLog(
      ::grpc::CallbackServerContext* /*context*/, const ::cacheengine::FlushLogRequest* /*request*/, ::cacheengine::FlushLogResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FlushLatencyLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FlushLatencyLog() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::cacheengine::FlushLatencyLogRequest, ::cacheengine::FlushLatencyLogResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cacheengine::FlushLatencyLogRequest* request, ::cacheengine::FlushLatencyLogResponse* response) { return this->FlushLatencyLog(context, request, response); }));}
    void SetMessageAllocatorFor_FlushLatencyLog(
        ::grpc::MessageAllocator< ::cacheengine::FlushLatencyLogRequest, ::cacheengine::FlushLatencyLogResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cacheengine::FlushLatencyLogRequest, ::cacheengine::FlushLatencyLogResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FlushLatencyLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FlushLatencyLog(::grpc::ServerContext* /*context*/, const ::cacheengine::FlushLatencyLogRequest* /*request*/, ::cacheengine::FlushLatencyLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FlushLatencyLog(
      ::grpc::CallbackServerContext* /*context*/, const ::cacheengine::FlushLatencyLogRequest* /*request*/, ::cacheengine::FlushLatencyLogResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ClearDRAMCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ClearDRAMCache() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::cacheengine::ClearDRAMCacheRequest, ::cacheengine::ClearDRAMCacheResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cacheengine::ClearDRAMCacheRequest* request, ::cacheengine::ClearDRAMCacheResponse* response) { return this->ClearDRAMCache(context, request, response); }));}
    void SetMessageAllocatorFor_ClearDRAMCache(
        ::grpc::MessageAllocator< ::cacheengine::ClearDRAMCacheRequest, ::cacheengine::ClearDRAMCacheResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cacheengine::ClearDRAMCacheRequest, ::cacheengine::ClearDRAMCacheResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ClearDRAMCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearDRAMCache(::grpc::ServerContext* /*context*/, const ::cacheengine::ClearDRAMCacheRequest* /*request*/, ::cacheengine::ClearDRAMCacheResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ClearDRAMCache(
      ::grpc::CallbackServerContext* /*context*/, const ::cacheengine::ClearDRAMCacheRequest* /*request*/, ::cacheengine::ClearDRAMCacheResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Prefetch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Prefetch() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::cacheengine::PrefetchRequest, ::cacheengine::PrefetchResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cacheengine::PrefetchRequest* request, ::cacheengine::PrefetchResponse* response) { return this->Prefetch(context, request, response); }));}
    void SetMessageAllocatorFor_Prefetch(
        ::grpc::MessageAllocator< ::cacheengine::PrefetchRequest, ::cacheengine::PrefetchResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cacheengine::PrefetchRequest, ::cacheengine::PrefetchResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Prefetch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prefetch(::grpc::ServerContext* /*context*/, const ::cacheengine::PrefetchRequest* /*request*/, ::cacheengine::PrefetchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Prefetch(
      ::grpc::CallbackServerContext* /*context*/, const ::cacheengine::PrefetchRequest* /*request*/, ::cacheengine::PrefetchResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Stop() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::cacheengine::StopRequest, ::cacheengine::StopResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cacheengine::StopRequest* request, ::cacheengine::StopResponse* response) { return this->Stop(context, request, response); }));}
    void SetMessageAllocatorFor_Stop(
        ::grpc::MessageAllocator< ::cacheengine::StopRequest, ::cacheengine::StopResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cacheengine::StopRequest, ::cacheengine::StopResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::cacheengine::StopRequest* /*request*/, ::cacheengine::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Stop(
      ::grpc::CallbackServerContext* /*context*/, const ::cacheengine::StopRequest* /*request*/, ::cacheengine::StopResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Put<WithCallbackMethod_Get<WithCallbackMethod_Delete<WithCallbackMethod_Initialize<WithCallbackMethod_FlushLog<WithCallbackMethod_FlushLatencyLog<WithCallbackMethod_ClearDRAMCache<WithCallbackMethod_Prefetch<WithCallbackMethod_Stop<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Put() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::cacheengine::PutRequest* /*request*/, ::cacheengine::PutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::cacheengine::GetRequest* /*request*/, ::cacheengine::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::cacheengine::DeleteRequest* /*request*/, ::cacheengine::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Initialize() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* /*context*/, const ::cacheengine::InitializeRequest* /*request*/, ::cacheengine::InitializeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FlushLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FlushLog() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_FlushLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FlushLog(::grpc::ServerContext* /*context*/, const ::cacheengine::FlushLogRequest* /*request*/, ::cacheengine::FlushLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FlushLatencyLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FlushLatencyLog() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_FlushLatencyLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FlushLatencyLog(::grpc::ServerContext* /*context*/, const ::cacheengine::FlushLatencyLogRequest* /*request*/, ::cacheengine::FlushLatencyLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ClearDRAMCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ClearDRAMCache() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ClearDRAMCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearDRAMCache(::grpc::ServerContext* /*context*/, const ::cacheengine::ClearDRAMCacheRequest* /*request*/, ::cacheengine::ClearDRAMCacheResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Prefetch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Prefetch() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_Prefetch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prefetch(::grpc::ServerContext* /*context*/, const ::cacheengine::PrefetchRequest* /*request*/, ::cacheengine::PrefetchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Stop() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::cacheengine::StopRequest* /*request*/, ::cacheengine::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Put() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::cacheengine::PutRequest* /*request*/, ::cacheengine::PutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::cacheengine::GetRequest* /*request*/, ::cacheengine::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::cacheengine::DeleteRequest* /*request*/, ::cacheengine::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Initialize() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* /*context*/, const ::cacheengine::InitializeRequest* /*request*/, ::cacheengine::InitializeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitialize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FlushLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FlushLog() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_FlushLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FlushLog(::grpc::ServerContext* /*context*/, const ::cacheengine::FlushLogRequest* /*request*/, ::cacheengine::FlushLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFlushLog(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FlushLatencyLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FlushLatencyLog() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_FlushLatencyLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FlushLatencyLog(::grpc::ServerContext* /*context*/, const ::cacheengine::FlushLatencyLogRequest* /*request*/, ::cacheengine::FlushLatencyLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFlushLatencyLog(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ClearDRAMCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ClearDRAMCache() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ClearDRAMCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearDRAMCache(::grpc::ServerContext* /*context*/, const ::cacheengine::ClearDRAMCacheRequest* /*request*/, ::cacheengine::ClearDRAMCacheResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearDRAMCache(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Prefetch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Prefetch() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_Prefetch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prefetch(::grpc::ServerContext* /*context*/, const ::cacheengine::PrefetchRequest* /*request*/, ::cacheengine::PrefetchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrefetch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Stop() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::cacheengine::StopRequest* /*request*/, ::cacheengine::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Put() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Put(context, request, response); }));
    }
    ~WithRawCallbackMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::cacheengine::PutRequest* /*request*/, ::cacheengine::PutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Put(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Get() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Get(context, request, response); }));
    }
    ~WithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::cacheengine::GetRequest* /*request*/, ::cacheengine::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Delete() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Delete(context, request, response); }));
    }
    ~WithRawCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::cacheengine::DeleteRequest* /*request*/, ::cacheengine::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Initialize() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Initialize(context, request, response); }));
    }
    ~WithRawCallbackMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* /*context*/, const ::cacheengine::InitializeRequest* /*request*/, ::cacheengine::InitializeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Initialize(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FlushLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FlushLog() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FlushLog(context, request, response); }));
    }
    ~WithRawCallbackMethod_FlushLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FlushLog(::grpc::ServerContext* /*context*/, const ::cacheengine::FlushLogRequest* /*request*/, ::cacheengine::FlushLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FlushLog(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FlushLatencyLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FlushLatencyLog() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FlushLatencyLog(context, request, response); }));
    }
    ~WithRawCallbackMethod_FlushLatencyLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FlushLatencyLog(::grpc::ServerContext* /*context*/, const ::cacheengine::FlushLatencyLogRequest* /*request*/, ::cacheengine::FlushLatencyLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FlushLatencyLog(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ClearDRAMCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ClearDRAMCache() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ClearDRAMCache(context, request, response); }));
    }
    ~WithRawCallbackMethod_ClearDRAMCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearDRAMCache(::grpc::ServerContext* /*context*/, const ::cacheengine::ClearDRAMCacheRequest* /*request*/, ::cacheengine::ClearDRAMCacheResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ClearDRAMCache(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Prefetch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Prefetch() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Prefetch(context, request, response); }));
    }
    ~WithRawCallbackMethod_Prefetch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prefetch(::grpc::ServerContext* /*context*/, const ::cacheengine::PrefetchRequest* /*request*/, ::cacheengine::PrefetchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Prefetch(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Stop() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Stop(context, request, response); }));
    }
    ~WithRawCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::cacheengine::StopRequest* /*request*/, ::cacheengine::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Stop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Put() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cacheengine::PutRequest, ::cacheengine::PutResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cacheengine::PutRequest, ::cacheengine::PutResponse>* streamer) {
                       return this->StreamedPut(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::cacheengine::PutRequest* /*request*/, ::cacheengine::PutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cacheengine::PutRequest,::cacheengine::PutResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cacheengine::GetRequest, ::cacheengine::GetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cacheengine::GetRequest, ::cacheengine::GetResponse>* streamer) {
                       return this->StreamedGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::cacheengine::GetRequest* /*request*/, ::cacheengine::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cacheengine::GetRequest,::cacheengine::GetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cacheengine::DeleteRequest, ::cacheengine::DeleteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cacheengine::DeleteRequest, ::cacheengine::DeleteResponse>* streamer) {
                       return this->StreamedDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::cacheengine::DeleteRequest* /*request*/, ::cacheengine::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cacheengine::DeleteRequest,::cacheengine::DeleteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Initialize() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cacheengine::InitializeRequest, ::cacheengine::InitializeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cacheengine::InitializeRequest, ::cacheengine::InitializeResponse>* streamer) {
                       return this->StreamedInitialize(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* /*context*/, const ::cacheengine::InitializeRequest* /*request*/, ::cacheengine::InitializeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInitialize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cacheengine::InitializeRequest,::cacheengine::InitializeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FlushLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FlushLog() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cacheengine::FlushLogRequest, ::cacheengine::FlushLogResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cacheengine::FlushLogRequest, ::cacheengine::FlushLogResponse>* streamer) {
                       return this->StreamedFlushLog(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FlushLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FlushLog(::grpc::ServerContext* /*context*/, const ::cacheengine::FlushLogRequest* /*request*/, ::cacheengine::FlushLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFlushLog(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cacheengine::FlushLogRequest,::cacheengine::FlushLogResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FlushLatencyLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FlushLatencyLog() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cacheengine::FlushLatencyLogRequest, ::cacheengine::FlushLatencyLogResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cacheengine::FlushLatencyLogRequest, ::cacheengine::FlushLatencyLogResponse>* streamer) {
                       return this->StreamedFlushLatencyLog(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FlushLatencyLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FlushLatencyLog(::grpc::ServerContext* /*context*/, const ::cacheengine::FlushLatencyLogRequest* /*request*/, ::cacheengine::FlushLatencyLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFlushLatencyLog(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cacheengine::FlushLatencyLogRequest,::cacheengine::FlushLatencyLogResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ClearDRAMCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ClearDRAMCache() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cacheengine::ClearDRAMCacheRequest, ::cacheengine::ClearDRAMCacheResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cacheengine::ClearDRAMCacheRequest, ::cacheengine::ClearDRAMCacheResponse>* streamer) {
                       return this->StreamedClearDRAMCache(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ClearDRAMCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ClearDRAMCache(::grpc::ServerContext* /*context*/, const ::cacheengine::ClearDRAMCacheRequest* /*request*/, ::cacheengine::ClearDRAMCacheResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClearDRAMCache(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cacheengine::ClearDRAMCacheRequest,::cacheengine::ClearDRAMCacheResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Prefetch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Prefetch() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cacheengine::PrefetchRequest, ::cacheengine::PrefetchResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cacheengine::PrefetchRequest, ::cacheengine::PrefetchResponse>* streamer) {
                       return this->StreamedPrefetch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Prefetch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Prefetch(::grpc::ServerContext* /*context*/, const ::cacheengine::PrefetchRequest* /*request*/, ::cacheengine::PrefetchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPrefetch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cacheengine::PrefetchRequest,::cacheengine::PrefetchResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Stop() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cacheengine::StopRequest, ::cacheengine::StopResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cacheengine::StopRequest, ::cacheengine::StopResponse>* streamer) {
                       return this->StreamedStop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::cacheengine::StopRequest* /*request*/, ::cacheengine::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cacheengine::StopRequest,::cacheengine::StopResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Put<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_Initialize<WithStreamedUnaryMethod_FlushLog<WithStreamedUnaryMethod_FlushLatencyLog<WithStreamedUnaryMethod_ClearDRAMCache<WithStreamedUnaryMethod_Prefetch<WithStreamedUnaryMethod_Stop<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Put<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_Initialize<WithStreamedUnaryMethod_FlushLog<WithStreamedUnaryMethod_FlushLatencyLog<WithStreamedUnaryMethod_ClearDRAMCache<WithStreamedUnaryMethod_Prefetch<WithStreamedUnaryMethod_Stop<Service > > > > > > > > > StreamedService;
};

}  // namespace cacheengine


#endif  // GRPC_cache_5fengine_2eproto__INCLUDED
