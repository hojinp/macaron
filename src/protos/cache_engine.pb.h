// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cache_engine.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_cache_5fengine_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cache_5fengine_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cache_5fengine_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cache_5fengine_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cache_5fengine_2eproto;
namespace cacheengine {
class ClearDRAMCacheRequest;
struct ClearDRAMCacheRequestDefaultTypeInternal;
extern ClearDRAMCacheRequestDefaultTypeInternal _ClearDRAMCacheRequest_default_instance_;
class ClearDRAMCacheResponse;
struct ClearDRAMCacheResponseDefaultTypeInternal;
extern ClearDRAMCacheResponseDefaultTypeInternal _ClearDRAMCacheResponse_default_instance_;
class DeleteRequest;
struct DeleteRequestDefaultTypeInternal;
extern DeleteRequestDefaultTypeInternal _DeleteRequest_default_instance_;
class DeleteResponse;
struct DeleteResponseDefaultTypeInternal;
extern DeleteResponseDefaultTypeInternal _DeleteResponse_default_instance_;
class FlushLatencyLogRequest;
struct FlushLatencyLogRequestDefaultTypeInternal;
extern FlushLatencyLogRequestDefaultTypeInternal _FlushLatencyLogRequest_default_instance_;
class FlushLatencyLogResponse;
struct FlushLatencyLogResponseDefaultTypeInternal;
extern FlushLatencyLogResponseDefaultTypeInternal _FlushLatencyLogResponse_default_instance_;
class FlushLogRequest;
struct FlushLogRequestDefaultTypeInternal;
extern FlushLogRequestDefaultTypeInternal _FlushLogRequest_default_instance_;
class FlushLogResponse;
struct FlushLogResponseDefaultTypeInternal;
extern FlushLogResponseDefaultTypeInternal _FlushLogResponse_default_instance_;
class GetRequest;
struct GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class GetResponse;
struct GetResponseDefaultTypeInternal;
extern GetResponseDefaultTypeInternal _GetResponse_default_instance_;
class InitializeRequest;
struct InitializeRequestDefaultTypeInternal;
extern InitializeRequestDefaultTypeInternal _InitializeRequest_default_instance_;
class InitializeResponse;
struct InitializeResponseDefaultTypeInternal;
extern InitializeResponseDefaultTypeInternal _InitializeResponse_default_instance_;
class PrefetchRequest;
struct PrefetchRequestDefaultTypeInternal;
extern PrefetchRequestDefaultTypeInternal _PrefetchRequest_default_instance_;
class PrefetchResponse;
struct PrefetchResponseDefaultTypeInternal;
extern PrefetchResponseDefaultTypeInternal _PrefetchResponse_default_instance_;
class PutRequest;
struct PutRequestDefaultTypeInternal;
extern PutRequestDefaultTypeInternal _PutRequest_default_instance_;
class PutResponse;
struct PutResponseDefaultTypeInternal;
extern PutResponseDefaultTypeInternal _PutResponse_default_instance_;
class StopRequest;
struct StopRequestDefaultTypeInternal;
extern StopRequestDefaultTypeInternal _StopRequest_default_instance_;
class StopResponse;
struct StopResponseDefaultTypeInternal;
extern StopResponseDefaultTypeInternal _StopResponse_default_instance_;
}  // namespace cacheengine
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cacheengine {

// ===================================================================


// -------------------------------------------------------------------

class StopResponse final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cacheengine.StopResponse) */ {
 public:
  inline StopResponse() : StopResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StopResponse(::google::protobuf::internal::ConstantInitialized);

  inline StopResponse(const StopResponse& from)
      : StopResponse(nullptr, from) {}
  StopResponse(StopResponse&& from) noexcept
    : StopResponse() {
    *this = ::std::move(from);
  }

  inline StopResponse& operator=(const StopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopResponse& operator=(StopResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopResponse* internal_default_instance() {
    return reinterpret_cast<const StopResponse*>(
               &_StopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(StopResponse& a, StopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StopResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StopResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cacheengine.StopResponse";
  }
  protected:
  explicit StopResponse(::google::protobuf::Arena* arena);
  StopResponse(::google::protobuf::Arena* arena, const StopResponse& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cacheengine.StopResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_cache_5fengine_2eproto;
};// -------------------------------------------------------------------

class StopRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cacheengine.StopRequest) */ {
 public:
  inline StopRequest() : StopRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StopRequest(::google::protobuf::internal::ConstantInitialized);

  inline StopRequest(const StopRequest& from)
      : StopRequest(nullptr, from) {}
  StopRequest(StopRequest&& from) noexcept
    : StopRequest() {
    *this = ::std::move(from);
  }

  inline StopRequest& operator=(const StopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRequest& operator=(StopRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopRequest* internal_default_instance() {
    return reinterpret_cast<const StopRequest*>(
               &_StopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(StopRequest& a, StopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StopRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StopRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cacheengine.StopRequest";
  }
  protected:
  explicit StopRequest(::google::protobuf::Arena* arena);
  StopRequest(::google::protobuf::Arena* arena, const StopRequest& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cacheengine.StopRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_cache_5fengine_2eproto;
};// -------------------------------------------------------------------

class PutResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cacheengine.PutResponse) */ {
 public:
  inline PutResponse() : PutResponse(nullptr) {}
  ~PutResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PutResponse(::google::protobuf::internal::ConstantInitialized);

  inline PutResponse(const PutResponse& from)
      : PutResponse(nullptr, from) {}
  PutResponse(PutResponse&& from) noexcept
    : PutResponse() {
    *this = ::std::move(from);
  }

  inline PutResponse& operator=(const PutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutResponse& operator=(PutResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PutResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutResponse* internal_default_instance() {
    return reinterpret_cast<const PutResponse*>(
               &_PutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PutResponse& a, PutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PutResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PutResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PutResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PutResponse& from) {
    PutResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PutResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cacheengine.PutResponse";
  }
  protected:
  explicit PutResponse(::google::protobuf::Arena* arena);
  PutResponse(::google::protobuf::Arena* arena, const PutResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cacheengine.PutResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cache_5fengine_2eproto;
};// -------------------------------------------------------------------

class PutRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cacheengine.PutRequest) */ {
 public:
  inline PutRequest() : PutRequest(nullptr) {}
  ~PutRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PutRequest(::google::protobuf::internal::ConstantInitialized);

  inline PutRequest(const PutRequest& from)
      : PutRequest(nullptr, from) {}
  PutRequest(PutRequest&& from) noexcept
    : PutRequest() {
    *this = ::std::move(from);
  }

  inline PutRequest& operator=(const PutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutRequest& operator=(PutRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PutRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutRequest* internal_default_instance() {
    return reinterpret_cast<const PutRequest*>(
               &_PutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PutRequest& a, PutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PutRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PutRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PutRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PutRequest& from) {
    PutRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PutRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cacheengine.PutRequest";
  }
  protected:
  explicit PutRequest(::google::protobuf::Arena* arena);
  PutRequest(::google::protobuf::Arena* arena, const PutRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string key = 1;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // bytes data = 2;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:cacheengine.PutRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      34, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cache_5fengine_2eproto;
};// -------------------------------------------------------------------

class PrefetchResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cacheengine.PrefetchResponse) */ {
 public:
  inline PrefetchResponse() : PrefetchResponse(nullptr) {}
  ~PrefetchResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PrefetchResponse(::google::protobuf::internal::ConstantInitialized);

  inline PrefetchResponse(const PrefetchResponse& from)
      : PrefetchResponse(nullptr, from) {}
  PrefetchResponse(PrefetchResponse&& from) noexcept
    : PrefetchResponse() {
    *this = ::std::move(from);
  }

  inline PrefetchResponse& operator=(const PrefetchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrefetchResponse& operator=(PrefetchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrefetchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrefetchResponse* internal_default_instance() {
    return reinterpret_cast<const PrefetchResponse*>(
               &_PrefetchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PrefetchResponse& a, PrefetchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PrefetchResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrefetchResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrefetchResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrefetchResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PrefetchResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PrefetchResponse& from) {
    PrefetchResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PrefetchResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cacheengine.PrefetchResponse";
  }
  protected:
  explicit PrefetchResponse(::google::protobuf::Arena* arena);
  PrefetchResponse(::google::protobuf::Arena* arena, const PrefetchResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cacheengine.PrefetchResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cache_5fengine_2eproto;
};// -------------------------------------------------------------------

class PrefetchRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cacheengine.PrefetchRequest) */ {
 public:
  inline PrefetchRequest() : PrefetchRequest(nullptr) {}
  ~PrefetchRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PrefetchRequest(::google::protobuf::internal::ConstantInitialized);

  inline PrefetchRequest(const PrefetchRequest& from)
      : PrefetchRequest(nullptr, from) {}
  PrefetchRequest(PrefetchRequest&& from) noexcept
    : PrefetchRequest() {
    *this = ::std::move(from);
  }

  inline PrefetchRequest& operator=(const PrefetchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrefetchRequest& operator=(PrefetchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrefetchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrefetchRequest* internal_default_instance() {
    return reinterpret_cast<const PrefetchRequest*>(
               &_PrefetchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PrefetchRequest& a, PrefetchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PrefetchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrefetchRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrefetchRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrefetchRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PrefetchRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PrefetchRequest& from) {
    PrefetchRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PrefetchRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cacheengine.PrefetchRequest";
  }
  protected:
  explicit PrefetchRequest(::google::protobuf::Arena* arena);
  PrefetchRequest(::google::protobuf::Arena* arena, const PrefetchRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetAddressFieldNumber = 2,
    kCacheEngineAddressesFieldNumber = 3,
    kSortFilePathFieldNumber = 4,
    kNewServerFieldNumber = 1,
  };
  // string target_address = 2;
  void clear_target_address() ;
  const std::string& target_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target_address(Arg_&& arg, Args_... args);
  std::string* mutable_target_address();
  PROTOBUF_NODISCARD std::string* release_target_address();
  void set_allocated_target_address(std::string* value);

  private:
  const std::string& _internal_target_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_address(
      const std::string& value);
  std::string* _internal_mutable_target_address();

  public:
  // string cache_engine_addresses = 3;
  void clear_cache_engine_addresses() ;
  const std::string& cache_engine_addresses() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cache_engine_addresses(Arg_&& arg, Args_... args);
  std::string* mutable_cache_engine_addresses();
  PROTOBUF_NODISCARD std::string* release_cache_engine_addresses();
  void set_allocated_cache_engine_addresses(std::string* value);

  private:
  const std::string& _internal_cache_engine_addresses() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cache_engine_addresses(
      const std::string& value);
  std::string* _internal_mutable_cache_engine_addresses();

  public:
  // string sort_file_path = 4;
  void clear_sort_file_path() ;
  const std::string& sort_file_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sort_file_path(Arg_&& arg, Args_... args);
  std::string* mutable_sort_file_path();
  PROTOBUF_NODISCARD std::string* release_sort_file_path();
  void set_allocated_sort_file_path(std::string* value);

  private:
  const std::string& _internal_sort_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sort_file_path(
      const std::string& value);
  std::string* _internal_mutable_sort_file_path();

  public:
  // bool new_server = 1;
  void clear_new_server() ;
  bool new_server() const;
  void set_new_server(bool value);

  private:
  bool _internal_new_server() const;
  void _internal_set_new_server(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cacheengine.PrefetchRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      86, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr target_address_;
    ::google::protobuf::internal::ArenaStringPtr cache_engine_addresses_;
    ::google::protobuf::internal::ArenaStringPtr sort_file_path_;
    bool new_server_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cache_5fengine_2eproto;
};// -------------------------------------------------------------------

class InitializeResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cacheengine.InitializeResponse) */ {
 public:
  inline InitializeResponse() : InitializeResponse(nullptr) {}
  ~InitializeResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InitializeResponse(::google::protobuf::internal::ConstantInitialized);

  inline InitializeResponse(const InitializeResponse& from)
      : InitializeResponse(nullptr, from) {}
  InitializeResponse(InitializeResponse&& from) noexcept
    : InitializeResponse() {
    *this = ::std::move(from);
  }

  inline InitializeResponse& operator=(const InitializeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitializeResponse& operator=(InitializeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitializeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitializeResponse* internal_default_instance() {
    return reinterpret_cast<const InitializeResponse*>(
               &_InitializeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InitializeResponse& a, InitializeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InitializeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitializeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitializeResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitializeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InitializeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const InitializeResponse& from) {
    InitializeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(InitializeResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cacheengine.InitializeResponse";
  }
  protected:
  explicit InitializeResponse(::google::protobuf::Arena* arena);
  InitializeResponse(::google::protobuf::Arena* arena, const InitializeResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsRunningFieldNumber = 1,
  };
  // bool is_running = 1;
  void clear_is_running() ;
  bool is_running() const;
  void set_is_running(bool value);

  private:
  bool _internal_is_running() const;
  void _internal_set_is_running(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cacheengine.InitializeResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    bool is_running_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cache_5fengine_2eproto;
};// -------------------------------------------------------------------

class InitializeRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cacheengine.InitializeRequest) */ {
 public:
  inline InitializeRequest() : InitializeRequest(nullptr) {}
  ~InitializeRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InitializeRequest(::google::protobuf::internal::ConstantInitialized);

  inline InitializeRequest(const InitializeRequest& from)
      : InitializeRequest(nullptr, from) {}
  InitializeRequest(InitializeRequest&& from) noexcept
    : InitializeRequest() {
    *this = ::std::move(from);
  }

  inline InitializeRequest& operator=(const InitializeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitializeRequest& operator=(InitializeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitializeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitializeRequest* internal_default_instance() {
    return reinterpret_cast<const InitializeRequest*>(
               &_InitializeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InitializeRequest& a, InitializeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InitializeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitializeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitializeRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitializeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InitializeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const InitializeRequest& from) {
    InitializeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(InitializeRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cacheengine.InitializeRequest";
  }
  protected:
  explicit InitializeRequest(::google::protobuf::Arena* arena);
  InitializeRequest(::google::protobuf::Arena* arena, const InitializeRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDlBucketNameFieldNumber = 2,
    kOscBucketNameFieldNumber = 4,
    kMeringueAddressFieldNumber = 5,
    kLogFilePathFieldNumber = 9,
    kLocalEndpointUrlFieldNumber = 10,
    kRemoteEndpointUrlFieldNumber = 11,
    kNameFieldNumber = 14,
    kRedisConfFilePathFieldNumber = 15,
    kLocalRegionFieldNumber = 18,
    kRemoteRegionFieldNumber = 19,
    kDlCspFieldNumber = 1,
    kOscCspFieldNumber = 3,
    kCacheLevelModeFieldNumber = 6,
    kPackingModeFieldNumber = 7,
    kLogFlushPeriodFieldNumber = 8,
    kMaxBlockObjectCountFieldNumber = 13,
    kMaxBlockSizeFieldNumber = 12,
    kLatencyLoggingEnabledFieldNumber = 16,
    kIsOnPremFieldNumber = 17,
  };
  // string dl_bucket_name = 2;
  void clear_dl_bucket_name() ;
  const std::string& dl_bucket_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dl_bucket_name(Arg_&& arg, Args_... args);
  std::string* mutable_dl_bucket_name();
  PROTOBUF_NODISCARD std::string* release_dl_bucket_name();
  void set_allocated_dl_bucket_name(std::string* value);

  private:
  const std::string& _internal_dl_bucket_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dl_bucket_name(
      const std::string& value);
  std::string* _internal_mutable_dl_bucket_name();

  public:
  // string osc_bucket_name = 4;
  void clear_osc_bucket_name() ;
  const std::string& osc_bucket_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_osc_bucket_name(Arg_&& arg, Args_... args);
  std::string* mutable_osc_bucket_name();
  PROTOBUF_NODISCARD std::string* release_osc_bucket_name();
  void set_allocated_osc_bucket_name(std::string* value);

  private:
  const std::string& _internal_osc_bucket_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_osc_bucket_name(
      const std::string& value);
  std::string* _internal_mutable_osc_bucket_name();

  public:
  // string meringue_address = 5;
  void clear_meringue_address() ;
  const std::string& meringue_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_meringue_address(Arg_&& arg, Args_... args);
  std::string* mutable_meringue_address();
  PROTOBUF_NODISCARD std::string* release_meringue_address();
  void set_allocated_meringue_address(std::string* value);

  private:
  const std::string& _internal_meringue_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_meringue_address(
      const std::string& value);
  std::string* _internal_mutable_meringue_address();

  public:
  // string log_file_path = 9;
  void clear_log_file_path() ;
  const std::string& log_file_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_log_file_path(Arg_&& arg, Args_... args);
  std::string* mutable_log_file_path();
  PROTOBUF_NODISCARD std::string* release_log_file_path();
  void set_allocated_log_file_path(std::string* value);

  private:
  const std::string& _internal_log_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log_file_path(
      const std::string& value);
  std::string* _internal_mutable_log_file_path();

  public:
  // string local_endpoint_url = 10;
  void clear_local_endpoint_url() ;
  const std::string& local_endpoint_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_local_endpoint_url(Arg_&& arg, Args_... args);
  std::string* mutable_local_endpoint_url();
  PROTOBUF_NODISCARD std::string* release_local_endpoint_url();
  void set_allocated_local_endpoint_url(std::string* value);

  private:
  const std::string& _internal_local_endpoint_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_local_endpoint_url(
      const std::string& value);
  std::string* _internal_mutable_local_endpoint_url();

  public:
  // string remote_endpoint_url = 11;
  void clear_remote_endpoint_url() ;
  const std::string& remote_endpoint_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_remote_endpoint_url(Arg_&& arg, Args_... args);
  std::string* mutable_remote_endpoint_url();
  PROTOBUF_NODISCARD std::string* release_remote_endpoint_url();
  void set_allocated_remote_endpoint_url(std::string* value);

  private:
  const std::string& _internal_remote_endpoint_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remote_endpoint_url(
      const std::string& value);
  std::string* _internal_mutable_remote_endpoint_url();

  public:
  // string name = 14;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string redis_conf_file_path = 15;
  void clear_redis_conf_file_path() ;
  const std::string& redis_conf_file_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_redis_conf_file_path(Arg_&& arg, Args_... args);
  std::string* mutable_redis_conf_file_path();
  PROTOBUF_NODISCARD std::string* release_redis_conf_file_path();
  void set_allocated_redis_conf_file_path(std::string* value);

  private:
  const std::string& _internal_redis_conf_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_redis_conf_file_path(
      const std::string& value);
  std::string* _internal_mutable_redis_conf_file_path();

  public:
  // string local_region = 18;
  void clear_local_region() ;
  const std::string& local_region() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_local_region(Arg_&& arg, Args_... args);
  std::string* mutable_local_region();
  PROTOBUF_NODISCARD std::string* release_local_region();
  void set_allocated_local_region(std::string* value);

  private:
  const std::string& _internal_local_region() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_local_region(
      const std::string& value);
  std::string* _internal_mutable_local_region();

  public:
  // string remote_region = 19;
  void clear_remote_region() ;
  const std::string& remote_region() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_remote_region(Arg_&& arg, Args_... args);
  std::string* mutable_remote_region();
  PROTOBUF_NODISCARD std::string* release_remote_region();
  void set_allocated_remote_region(std::string* value);

  private:
  const std::string& _internal_remote_region() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remote_region(
      const std::string& value);
  std::string* _internal_mutable_remote_region();

  public:
  // int32 dl_csp = 1;
  void clear_dl_csp() ;
  ::int32_t dl_csp() const;
  void set_dl_csp(::int32_t value);

  private:
  ::int32_t _internal_dl_csp() const;
  void _internal_set_dl_csp(::int32_t value);

  public:
  // int32 osc_csp = 3;
  void clear_osc_csp() ;
  ::int32_t osc_csp() const;
  void set_osc_csp(::int32_t value);

  private:
  ::int32_t _internal_osc_csp() const;
  void _internal_set_osc_csp(::int32_t value);

  public:
  // int32 cache_level_mode = 6;
  void clear_cache_level_mode() ;
  ::int32_t cache_level_mode() const;
  void set_cache_level_mode(::int32_t value);

  private:
  ::int32_t _internal_cache_level_mode() const;
  void _internal_set_cache_level_mode(::int32_t value);

  public:
  // int32 packing_mode = 7;
  void clear_packing_mode() ;
  ::int32_t packing_mode() const;
  void set_packing_mode(::int32_t value);

  private:
  ::int32_t _internal_packing_mode() const;
  void _internal_set_packing_mode(::int32_t value);

  public:
  // int32 log_flush_period = 8;
  void clear_log_flush_period() ;
  ::int32_t log_flush_period() const;
  void set_log_flush_period(::int32_t value);

  private:
  ::int32_t _internal_log_flush_period() const;
  void _internal_set_log_flush_period(::int32_t value);

  public:
  // int32 max_block_object_count = 13;
  void clear_max_block_object_count() ;
  ::int32_t max_block_object_count() const;
  void set_max_block_object_count(::int32_t value);

  private:
  ::int32_t _internal_max_block_object_count() const;
  void _internal_set_max_block_object_count(::int32_t value);

  public:
  // int64 max_block_size = 12;
  void clear_max_block_size() ;
  ::int64_t max_block_size() const;
  void set_max_block_size(::int64_t value);

  private:
  ::int64_t _internal_max_block_size() const;
  void _internal_set_max_block_size(::int64_t value);

  public:
  // bool latency_logging_enabled = 16;
  void clear_latency_logging_enabled() ;
  bool latency_logging_enabled() const;
  void set_latency_logging_enabled(bool value);

  private:
  bool _internal_latency_logging_enabled() const;
  void _internal_set_latency_logging_enabled(bool value);

  public:
  // bool is_on_prem = 17;
  void clear_is_on_prem() ;
  bool is_on_prem() const;
  void set_is_on_prem(bool value);

  private:
  bool _internal_is_on_prem() const;
  void _internal_set_is_on_prem(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cacheengine.InitializeRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 19, 0,
      198, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr dl_bucket_name_;
    ::google::protobuf::internal::ArenaStringPtr osc_bucket_name_;
    ::google::protobuf::internal::ArenaStringPtr meringue_address_;
    ::google::protobuf::internal::ArenaStringPtr log_file_path_;
    ::google::protobuf::internal::ArenaStringPtr local_endpoint_url_;
    ::google::protobuf::internal::ArenaStringPtr remote_endpoint_url_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr redis_conf_file_path_;
    ::google::protobuf::internal::ArenaStringPtr local_region_;
    ::google::protobuf::internal::ArenaStringPtr remote_region_;
    ::int32_t dl_csp_;
    ::int32_t osc_csp_;
    ::int32_t cache_level_mode_;
    ::int32_t packing_mode_;
    ::int32_t log_flush_period_;
    ::int32_t max_block_object_count_;
    ::int64_t max_block_size_;
    bool latency_logging_enabled_;
    bool is_on_prem_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cache_5fengine_2eproto;
};// -------------------------------------------------------------------

class GetResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cacheengine.GetResponse) */ {
 public:
  inline GetResponse() : GetResponse(nullptr) {}
  ~GetResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetResponse(const GetResponse& from)
      : GetResponse(nullptr, from) {}
  GetResponse(GetResponse&& from) noexcept
    : GetResponse() {
    *this = ::std::move(from);
  }

  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResponse& operator=(GetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetResponse* internal_default_instance() {
    return reinterpret_cast<const GetResponse*>(
               &_GetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetResponse& a, GetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetResponse& from) {
    GetResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cacheengine.GetResponse";
  }
  protected:
  explicit GetResponse(::google::protobuf::Arena* arena);
  GetResponse(::google::protobuf::Arena* arena, const GetResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kExistsFieldNumber = 1,
    kSrcFieldNumber = 3,
  };
  // bytes data = 2;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // bool exists = 1;
  void clear_exists() ;
  bool exists() const;
  void set_exists(bool value);

  private:
  bool _internal_exists() const;
  void _internal_set_exists(bool value);

  public:
  // int32 src = 3;
  void clear_src() ;
  ::int32_t src() const;
  void set_src(::int32_t value);

  private:
  ::int32_t _internal_src() const;
  void _internal_set_src(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cacheengine.GetResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr data_;
    bool exists_;
    ::int32_t src_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cache_5fengine_2eproto;
};// -------------------------------------------------------------------

class GetRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cacheengine.GetRequest) */ {
 public:
  inline GetRequest() : GetRequest(nullptr) {}
  ~GetRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetRequest(const GetRequest& from)
      : GetRequest(nullptr, from) {}
  GetRequest(GetRequest&& from) noexcept
    : GetRequest() {
    *this = ::std::move(from);
  }

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
               &_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetRequest& a, GetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetRequest& from) {
    GetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cacheengine.GetRequest";
  }
  protected:
  explicit GetRequest(::google::protobuf::Arena* arena);
  GetRequest(::google::protobuf::Arena* arena, const GetRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // string key = 1;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // @@protoc_insertion_point(class_scope:cacheengine.GetRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      34, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr key_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cache_5fengine_2eproto;
};// -------------------------------------------------------------------

class FlushLogResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cacheengine.FlushLogResponse) */ {
 public:
  inline FlushLogResponse() : FlushLogResponse(nullptr) {}
  ~FlushLogResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FlushLogResponse(::google::protobuf::internal::ConstantInitialized);

  inline FlushLogResponse(const FlushLogResponse& from)
      : FlushLogResponse(nullptr, from) {}
  FlushLogResponse(FlushLogResponse&& from) noexcept
    : FlushLogResponse() {
    *this = ::std::move(from);
  }

  inline FlushLogResponse& operator=(const FlushLogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlushLogResponse& operator=(FlushLogResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlushLogResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlushLogResponse* internal_default_instance() {
    return reinterpret_cast<const FlushLogResponse*>(
               &_FlushLogResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FlushLogResponse& a, FlushLogResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FlushLogResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlushLogResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlushLogResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlushLogResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FlushLogResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FlushLogResponse& from) {
    FlushLogResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FlushLogResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cacheengine.FlushLogResponse";
  }
  protected:
  explicit FlushLogResponse(::google::protobuf::Arena* arena);
  FlushLogResponse(::google::protobuf::Arena* arena, const FlushLogResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kOscPutCntFieldNumber = 2,
    kDlGetBytesFieldNumber = 3,
    kDlPutBytesFieldNumber = 4,
    kFileCountFieldNumber = 5,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // int32 osc_put_cnt = 2;
  void clear_osc_put_cnt() ;
  ::int32_t osc_put_cnt() const;
  void set_osc_put_cnt(::int32_t value);

  private:
  ::int32_t _internal_osc_put_cnt() const;
  void _internal_set_osc_put_cnt(::int32_t value);

  public:
  // int64 dl_get_bytes = 3;
  void clear_dl_get_bytes() ;
  ::int64_t dl_get_bytes() const;
  void set_dl_get_bytes(::int64_t value);

  private:
  ::int64_t _internal_dl_get_bytes() const;
  void _internal_set_dl_get_bytes(::int64_t value);

  public:
  // int64 dl_put_bytes = 4;
  void clear_dl_put_bytes() ;
  ::int64_t dl_put_bytes() const;
  void set_dl_put_bytes(::int64_t value);

  private:
  ::int64_t _internal_dl_put_bytes() const;
  void _internal_set_dl_put_bytes(::int64_t value);

  public:
  // int32 file_count = 5;
  void clear_file_count() ;
  ::int32_t file_count() const;
  void set_file_count(::int32_t value);

  private:
  ::int32_t _internal_file_count() const;
  void _internal_set_file_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cacheengine.FlushLogResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    bool success_;
    ::int32_t osc_put_cnt_;
    ::int64_t dl_get_bytes_;
    ::int64_t dl_put_bytes_;
    ::int32_t file_count_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cache_5fengine_2eproto;
};// -------------------------------------------------------------------

class FlushLogRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cacheengine.FlushLogRequest) */ {
 public:
  inline FlushLogRequest() : FlushLogRequest(nullptr) {}
  ~FlushLogRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FlushLogRequest(::google::protobuf::internal::ConstantInitialized);

  inline FlushLogRequest(const FlushLogRequest& from)
      : FlushLogRequest(nullptr, from) {}
  FlushLogRequest(FlushLogRequest&& from) noexcept
    : FlushLogRequest() {
    *this = ::std::move(from);
  }

  inline FlushLogRequest& operator=(const FlushLogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlushLogRequest& operator=(FlushLogRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlushLogRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlushLogRequest* internal_default_instance() {
    return reinterpret_cast<const FlushLogRequest*>(
               &_FlushLogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FlushLogRequest& a, FlushLogRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FlushLogRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlushLogRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlushLogRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlushLogRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FlushLogRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FlushLogRequest& from) {
    FlushLogRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FlushLogRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cacheengine.FlushLogRequest";
  }
  protected:
  explicit FlushLogRequest(::google::protobuf::Arena* arena);
  FlushLogRequest(::google::protobuf::Arena* arena, const FlushLogRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCacheNameFieldNumber = 1,
    kLogDirPathFieldNumber = 2,
  };
  // string cache_name = 1;
  void clear_cache_name() ;
  const std::string& cache_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cache_name(Arg_&& arg, Args_... args);
  std::string* mutable_cache_name();
  PROTOBUF_NODISCARD std::string* release_cache_name();
  void set_allocated_cache_name(std::string* value);

  private:
  const std::string& _internal_cache_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cache_name(
      const std::string& value);
  std::string* _internal_mutable_cache_name();

  public:
  // string log_dir_path = 2;
  void clear_log_dir_path() ;
  const std::string& log_dir_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_log_dir_path(Arg_&& arg, Args_... args);
  std::string* mutable_log_dir_path();
  PROTOBUF_NODISCARD std::string* release_log_dir_path();
  void set_allocated_log_dir_path(std::string* value);

  private:
  const std::string& _internal_log_dir_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log_dir_path(
      const std::string& value);
  std::string* _internal_mutable_log_dir_path();

  public:
  // @@protoc_insertion_point(class_scope:cacheengine.FlushLogRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      58, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr cache_name_;
    ::google::protobuf::internal::ArenaStringPtr log_dir_path_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cache_5fengine_2eproto;
};// -------------------------------------------------------------------

class FlushLatencyLogResponse final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cacheengine.FlushLatencyLogResponse) */ {
 public:
  inline FlushLatencyLogResponse() : FlushLatencyLogResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FlushLatencyLogResponse(::google::protobuf::internal::ConstantInitialized);

  inline FlushLatencyLogResponse(const FlushLatencyLogResponse& from)
      : FlushLatencyLogResponse(nullptr, from) {}
  FlushLatencyLogResponse(FlushLatencyLogResponse&& from) noexcept
    : FlushLatencyLogResponse() {
    *this = ::std::move(from);
  }

  inline FlushLatencyLogResponse& operator=(const FlushLatencyLogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlushLatencyLogResponse& operator=(FlushLatencyLogResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlushLatencyLogResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlushLatencyLogResponse* internal_default_instance() {
    return reinterpret_cast<const FlushLatencyLogResponse*>(
               &_FlushLatencyLogResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(FlushLatencyLogResponse& a, FlushLatencyLogResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FlushLatencyLogResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlushLatencyLogResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlushLatencyLogResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlushLatencyLogResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const FlushLatencyLogResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const FlushLatencyLogResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cacheengine.FlushLatencyLogResponse";
  }
  protected:
  explicit FlushLatencyLogResponse(::google::protobuf::Arena* arena);
  FlushLatencyLogResponse(::google::protobuf::Arena* arena, const FlushLatencyLogResponse& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cacheengine.FlushLatencyLogResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_cache_5fengine_2eproto;
};// -------------------------------------------------------------------

class FlushLatencyLogRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cacheengine.FlushLatencyLogRequest) */ {
 public:
  inline FlushLatencyLogRequest() : FlushLatencyLogRequest(nullptr) {}
  ~FlushLatencyLogRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FlushLatencyLogRequest(::google::protobuf::internal::ConstantInitialized);

  inline FlushLatencyLogRequest(const FlushLatencyLogRequest& from)
      : FlushLatencyLogRequest(nullptr, from) {}
  FlushLatencyLogRequest(FlushLatencyLogRequest&& from) noexcept
    : FlushLatencyLogRequest() {
    *this = ::std::move(from);
  }

  inline FlushLatencyLogRequest& operator=(const FlushLatencyLogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlushLatencyLogRequest& operator=(FlushLatencyLogRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlushLatencyLogRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlushLatencyLogRequest* internal_default_instance() {
    return reinterpret_cast<const FlushLatencyLogRequest*>(
               &_FlushLatencyLogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(FlushLatencyLogRequest& a, FlushLatencyLogRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FlushLatencyLogRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlushLatencyLogRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlushLatencyLogRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlushLatencyLogRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FlushLatencyLogRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FlushLatencyLogRequest& from) {
    FlushLatencyLogRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FlushLatencyLogRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cacheengine.FlushLatencyLogRequest";
  }
  protected:
  explicit FlushLatencyLogRequest(::google::protobuf::Arena* arena);
  FlushLatencyLogRequest(::google::protobuf::Arena* arena, const FlushLatencyLogRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogFilePathFieldNumber = 1,
  };
  // string log_file_path = 1;
  void clear_log_file_path() ;
  const std::string& log_file_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_log_file_path(Arg_&& arg, Args_... args);
  std::string* mutable_log_file_path();
  PROTOBUF_NODISCARD std::string* release_log_file_path();
  void set_allocated_log_file_path(std::string* value);

  private:
  const std::string& _internal_log_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log_file_path(
      const std::string& value);
  std::string* _internal_mutable_log_file_path();

  public:
  // @@protoc_insertion_point(class_scope:cacheengine.FlushLatencyLogRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      56, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr log_file_path_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cache_5fengine_2eproto;
};// -------------------------------------------------------------------

class DeleteResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cacheengine.DeleteResponse) */ {
 public:
  inline DeleteResponse() : DeleteResponse(nullptr) {}
  ~DeleteResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeleteResponse(::google::protobuf::internal::ConstantInitialized);

  inline DeleteResponse(const DeleteResponse& from)
      : DeleteResponse(nullptr, from) {}
  DeleteResponse(DeleteResponse&& from) noexcept
    : DeleteResponse() {
    *this = ::std::move(from);
  }

  inline DeleteResponse& operator=(const DeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteResponse& operator=(DeleteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteResponse*>(
               &_DeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteResponse& a, DeleteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeleteResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeleteResponse& from) {
    DeleteResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeleteResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cacheengine.DeleteResponse";
  }
  protected:
  explicit DeleteResponse(::google::protobuf::Arena* arena);
  DeleteResponse(::google::protobuf::Arena* arena, const DeleteResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cacheengine.DeleteResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cache_5fengine_2eproto;
};// -------------------------------------------------------------------

class DeleteRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cacheengine.DeleteRequest) */ {
 public:
  inline DeleteRequest() : DeleteRequest(nullptr) {}
  ~DeleteRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeleteRequest(::google::protobuf::internal::ConstantInitialized);

  inline DeleteRequest(const DeleteRequest& from)
      : DeleteRequest(nullptr, from) {}
  DeleteRequest(DeleteRequest&& from) noexcept
    : DeleteRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRequest& operator=(const DeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRequest& operator=(DeleteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRequest*>(
               &_DeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteRequest& a, DeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeleteRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeleteRequest& from) {
    DeleteRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeleteRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cacheengine.DeleteRequest";
  }
  protected:
  explicit DeleteRequest(::google::protobuf::Arena* arena);
  DeleteRequest(::google::protobuf::Arena* arena, const DeleteRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // string key = 1;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // @@protoc_insertion_point(class_scope:cacheengine.DeleteRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      37, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr key_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cache_5fengine_2eproto;
};// -------------------------------------------------------------------

class ClearDRAMCacheResponse final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cacheengine.ClearDRAMCacheResponse) */ {
 public:
  inline ClearDRAMCacheResponse() : ClearDRAMCacheResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClearDRAMCacheResponse(::google::protobuf::internal::ConstantInitialized);

  inline ClearDRAMCacheResponse(const ClearDRAMCacheResponse& from)
      : ClearDRAMCacheResponse(nullptr, from) {}
  ClearDRAMCacheResponse(ClearDRAMCacheResponse&& from) noexcept
    : ClearDRAMCacheResponse() {
    *this = ::std::move(from);
  }

  inline ClearDRAMCacheResponse& operator=(const ClearDRAMCacheResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearDRAMCacheResponse& operator=(ClearDRAMCacheResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClearDRAMCacheResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClearDRAMCacheResponse* internal_default_instance() {
    return reinterpret_cast<const ClearDRAMCacheResponse*>(
               &_ClearDRAMCacheResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ClearDRAMCacheResponse& a, ClearDRAMCacheResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearDRAMCacheResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearDRAMCacheResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClearDRAMCacheResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClearDRAMCacheResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ClearDRAMCacheResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ClearDRAMCacheResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cacheengine.ClearDRAMCacheResponse";
  }
  protected:
  explicit ClearDRAMCacheResponse(::google::protobuf::Arena* arena);
  ClearDRAMCacheResponse(::google::protobuf::Arena* arena, const ClearDRAMCacheResponse& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cacheengine.ClearDRAMCacheResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_cache_5fengine_2eproto;
};// -------------------------------------------------------------------

class ClearDRAMCacheRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cacheengine.ClearDRAMCacheRequest) */ {
 public:
  inline ClearDRAMCacheRequest() : ClearDRAMCacheRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClearDRAMCacheRequest(::google::protobuf::internal::ConstantInitialized);

  inline ClearDRAMCacheRequest(const ClearDRAMCacheRequest& from)
      : ClearDRAMCacheRequest(nullptr, from) {}
  ClearDRAMCacheRequest(ClearDRAMCacheRequest&& from) noexcept
    : ClearDRAMCacheRequest() {
    *this = ::std::move(from);
  }

  inline ClearDRAMCacheRequest& operator=(const ClearDRAMCacheRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearDRAMCacheRequest& operator=(ClearDRAMCacheRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClearDRAMCacheRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClearDRAMCacheRequest* internal_default_instance() {
    return reinterpret_cast<const ClearDRAMCacheRequest*>(
               &_ClearDRAMCacheRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ClearDRAMCacheRequest& a, ClearDRAMCacheRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearDRAMCacheRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearDRAMCacheRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClearDRAMCacheRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClearDRAMCacheRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ClearDRAMCacheRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ClearDRAMCacheRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cacheengine.ClearDRAMCacheRequest";
  }
  protected:
  explicit ClearDRAMCacheRequest(::google::protobuf::Arena* arena);
  ClearDRAMCacheRequest(::google::protobuf::Arena* arena, const ClearDRAMCacheRequest& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cacheengine.ClearDRAMCacheRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_cache_5fengine_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// InitializeRequest

// int32 dl_csp = 1;
inline void InitializeRequest::clear_dl_csp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dl_csp_ = 0;
}
inline ::int32_t InitializeRequest::dl_csp() const {
  // @@protoc_insertion_point(field_get:cacheengine.InitializeRequest.dl_csp)
  return _internal_dl_csp();
}
inline void InitializeRequest::set_dl_csp(::int32_t value) {
  _internal_set_dl_csp(value);
  // @@protoc_insertion_point(field_set:cacheengine.InitializeRequest.dl_csp)
}
inline ::int32_t InitializeRequest::_internal_dl_csp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dl_csp_;
}
inline void InitializeRequest::_internal_set_dl_csp(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dl_csp_ = value;
}

// string dl_bucket_name = 2;
inline void InitializeRequest::clear_dl_bucket_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dl_bucket_name_.ClearToEmpty();
}
inline const std::string& InitializeRequest::dl_bucket_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cacheengine.InitializeRequest.dl_bucket_name)
  return _internal_dl_bucket_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InitializeRequest::set_dl_bucket_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dl_bucket_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cacheengine.InitializeRequest.dl_bucket_name)
}
inline std::string* InitializeRequest::mutable_dl_bucket_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dl_bucket_name();
  // @@protoc_insertion_point(field_mutable:cacheengine.InitializeRequest.dl_bucket_name)
  return _s;
}
inline const std::string& InitializeRequest::_internal_dl_bucket_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dl_bucket_name_.Get();
}
inline void InitializeRequest::_internal_set_dl_bucket_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dl_bucket_name_.Set(value, GetArena());
}
inline std::string* InitializeRequest::_internal_mutable_dl_bucket_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.dl_bucket_name_.Mutable( GetArena());
}
inline std::string* InitializeRequest::release_dl_bucket_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:cacheengine.InitializeRequest.dl_bucket_name)
  return _impl_.dl_bucket_name_.Release();
}
inline void InitializeRequest::set_allocated_dl_bucket_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dl_bucket_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.dl_bucket_name_.IsDefault()) {
          _impl_.dl_bucket_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cacheengine.InitializeRequest.dl_bucket_name)
}

// int32 osc_csp = 3;
inline void InitializeRequest::clear_osc_csp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.osc_csp_ = 0;
}
inline ::int32_t InitializeRequest::osc_csp() const {
  // @@protoc_insertion_point(field_get:cacheengine.InitializeRequest.osc_csp)
  return _internal_osc_csp();
}
inline void InitializeRequest::set_osc_csp(::int32_t value) {
  _internal_set_osc_csp(value);
  // @@protoc_insertion_point(field_set:cacheengine.InitializeRequest.osc_csp)
}
inline ::int32_t InitializeRequest::_internal_osc_csp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.osc_csp_;
}
inline void InitializeRequest::_internal_set_osc_csp(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.osc_csp_ = value;
}

// string osc_bucket_name = 4;
inline void InitializeRequest::clear_osc_bucket_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.osc_bucket_name_.ClearToEmpty();
}
inline const std::string& InitializeRequest::osc_bucket_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cacheengine.InitializeRequest.osc_bucket_name)
  return _internal_osc_bucket_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InitializeRequest::set_osc_bucket_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.osc_bucket_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cacheengine.InitializeRequest.osc_bucket_name)
}
inline std::string* InitializeRequest::mutable_osc_bucket_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_osc_bucket_name();
  // @@protoc_insertion_point(field_mutable:cacheengine.InitializeRequest.osc_bucket_name)
  return _s;
}
inline const std::string& InitializeRequest::_internal_osc_bucket_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.osc_bucket_name_.Get();
}
inline void InitializeRequest::_internal_set_osc_bucket_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.osc_bucket_name_.Set(value, GetArena());
}
inline std::string* InitializeRequest::_internal_mutable_osc_bucket_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.osc_bucket_name_.Mutable( GetArena());
}
inline std::string* InitializeRequest::release_osc_bucket_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:cacheengine.InitializeRequest.osc_bucket_name)
  return _impl_.osc_bucket_name_.Release();
}
inline void InitializeRequest::set_allocated_osc_bucket_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.osc_bucket_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.osc_bucket_name_.IsDefault()) {
          _impl_.osc_bucket_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cacheengine.InitializeRequest.osc_bucket_name)
}

// string meringue_address = 5;
inline void InitializeRequest::clear_meringue_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.meringue_address_.ClearToEmpty();
}
inline const std::string& InitializeRequest::meringue_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cacheengine.InitializeRequest.meringue_address)
  return _internal_meringue_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InitializeRequest::set_meringue_address(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.meringue_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cacheengine.InitializeRequest.meringue_address)
}
inline std::string* InitializeRequest::mutable_meringue_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_meringue_address();
  // @@protoc_insertion_point(field_mutable:cacheengine.InitializeRequest.meringue_address)
  return _s;
}
inline const std::string& InitializeRequest::_internal_meringue_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.meringue_address_.Get();
}
inline void InitializeRequest::_internal_set_meringue_address(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.meringue_address_.Set(value, GetArena());
}
inline std::string* InitializeRequest::_internal_mutable_meringue_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.meringue_address_.Mutable( GetArena());
}
inline std::string* InitializeRequest::release_meringue_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:cacheengine.InitializeRequest.meringue_address)
  return _impl_.meringue_address_.Release();
}
inline void InitializeRequest::set_allocated_meringue_address(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.meringue_address_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.meringue_address_.IsDefault()) {
          _impl_.meringue_address_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cacheengine.InitializeRequest.meringue_address)
}

// int32 cache_level_mode = 6;
inline void InitializeRequest::clear_cache_level_mode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cache_level_mode_ = 0;
}
inline ::int32_t InitializeRequest::cache_level_mode() const {
  // @@protoc_insertion_point(field_get:cacheengine.InitializeRequest.cache_level_mode)
  return _internal_cache_level_mode();
}
inline void InitializeRequest::set_cache_level_mode(::int32_t value) {
  _internal_set_cache_level_mode(value);
  // @@protoc_insertion_point(field_set:cacheengine.InitializeRequest.cache_level_mode)
}
inline ::int32_t InitializeRequest::_internal_cache_level_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cache_level_mode_;
}
inline void InitializeRequest::_internal_set_cache_level_mode(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cache_level_mode_ = value;
}

// int32 packing_mode = 7;
inline void InitializeRequest::clear_packing_mode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.packing_mode_ = 0;
}
inline ::int32_t InitializeRequest::packing_mode() const {
  // @@protoc_insertion_point(field_get:cacheengine.InitializeRequest.packing_mode)
  return _internal_packing_mode();
}
inline void InitializeRequest::set_packing_mode(::int32_t value) {
  _internal_set_packing_mode(value);
  // @@protoc_insertion_point(field_set:cacheengine.InitializeRequest.packing_mode)
}
inline ::int32_t InitializeRequest::_internal_packing_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.packing_mode_;
}
inline void InitializeRequest::_internal_set_packing_mode(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.packing_mode_ = value;
}

// int32 log_flush_period = 8;
inline void InitializeRequest::clear_log_flush_period() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.log_flush_period_ = 0;
}
inline ::int32_t InitializeRequest::log_flush_period() const {
  // @@protoc_insertion_point(field_get:cacheengine.InitializeRequest.log_flush_period)
  return _internal_log_flush_period();
}
inline void InitializeRequest::set_log_flush_period(::int32_t value) {
  _internal_set_log_flush_period(value);
  // @@protoc_insertion_point(field_set:cacheengine.InitializeRequest.log_flush_period)
}
inline ::int32_t InitializeRequest::_internal_log_flush_period() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.log_flush_period_;
}
inline void InitializeRequest::_internal_set_log_flush_period(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.log_flush_period_ = value;
}

// string log_file_path = 9;
inline void InitializeRequest::clear_log_file_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.log_file_path_.ClearToEmpty();
}
inline const std::string& InitializeRequest::log_file_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cacheengine.InitializeRequest.log_file_path)
  return _internal_log_file_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InitializeRequest::set_log_file_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.log_file_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cacheengine.InitializeRequest.log_file_path)
}
inline std::string* InitializeRequest::mutable_log_file_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_log_file_path();
  // @@protoc_insertion_point(field_mutable:cacheengine.InitializeRequest.log_file_path)
  return _s;
}
inline const std::string& InitializeRequest::_internal_log_file_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.log_file_path_.Get();
}
inline void InitializeRequest::_internal_set_log_file_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.log_file_path_.Set(value, GetArena());
}
inline std::string* InitializeRequest::_internal_mutable_log_file_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.log_file_path_.Mutable( GetArena());
}
inline std::string* InitializeRequest::release_log_file_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:cacheengine.InitializeRequest.log_file_path)
  return _impl_.log_file_path_.Release();
}
inline void InitializeRequest::set_allocated_log_file_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.log_file_path_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.log_file_path_.IsDefault()) {
          _impl_.log_file_path_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cacheengine.InitializeRequest.log_file_path)
}

// string local_endpoint_url = 10;
inline void InitializeRequest::clear_local_endpoint_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.local_endpoint_url_.ClearToEmpty();
}
inline const std::string& InitializeRequest::local_endpoint_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cacheengine.InitializeRequest.local_endpoint_url)
  return _internal_local_endpoint_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InitializeRequest::set_local_endpoint_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.local_endpoint_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cacheengine.InitializeRequest.local_endpoint_url)
}
inline std::string* InitializeRequest::mutable_local_endpoint_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_local_endpoint_url();
  // @@protoc_insertion_point(field_mutable:cacheengine.InitializeRequest.local_endpoint_url)
  return _s;
}
inline const std::string& InitializeRequest::_internal_local_endpoint_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.local_endpoint_url_.Get();
}
inline void InitializeRequest::_internal_set_local_endpoint_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.local_endpoint_url_.Set(value, GetArena());
}
inline std::string* InitializeRequest::_internal_mutable_local_endpoint_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.local_endpoint_url_.Mutable( GetArena());
}
inline std::string* InitializeRequest::release_local_endpoint_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:cacheengine.InitializeRequest.local_endpoint_url)
  return _impl_.local_endpoint_url_.Release();
}
inline void InitializeRequest::set_allocated_local_endpoint_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.local_endpoint_url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.local_endpoint_url_.IsDefault()) {
          _impl_.local_endpoint_url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cacheengine.InitializeRequest.local_endpoint_url)
}

// string remote_endpoint_url = 11;
inline void InitializeRequest::clear_remote_endpoint_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.remote_endpoint_url_.ClearToEmpty();
}
inline const std::string& InitializeRequest::remote_endpoint_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cacheengine.InitializeRequest.remote_endpoint_url)
  return _internal_remote_endpoint_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InitializeRequest::set_remote_endpoint_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.remote_endpoint_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cacheengine.InitializeRequest.remote_endpoint_url)
}
inline std::string* InitializeRequest::mutable_remote_endpoint_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_remote_endpoint_url();
  // @@protoc_insertion_point(field_mutable:cacheengine.InitializeRequest.remote_endpoint_url)
  return _s;
}
inline const std::string& InitializeRequest::_internal_remote_endpoint_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.remote_endpoint_url_.Get();
}
inline void InitializeRequest::_internal_set_remote_endpoint_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.remote_endpoint_url_.Set(value, GetArena());
}
inline std::string* InitializeRequest::_internal_mutable_remote_endpoint_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.remote_endpoint_url_.Mutable( GetArena());
}
inline std::string* InitializeRequest::release_remote_endpoint_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:cacheengine.InitializeRequest.remote_endpoint_url)
  return _impl_.remote_endpoint_url_.Release();
}
inline void InitializeRequest::set_allocated_remote_endpoint_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.remote_endpoint_url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.remote_endpoint_url_.IsDefault()) {
          _impl_.remote_endpoint_url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cacheengine.InitializeRequest.remote_endpoint_url)
}

// int64 max_block_size = 12;
inline void InitializeRequest::clear_max_block_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_block_size_ = ::int64_t{0};
}
inline ::int64_t InitializeRequest::max_block_size() const {
  // @@protoc_insertion_point(field_get:cacheengine.InitializeRequest.max_block_size)
  return _internal_max_block_size();
}
inline void InitializeRequest::set_max_block_size(::int64_t value) {
  _internal_set_max_block_size(value);
  // @@protoc_insertion_point(field_set:cacheengine.InitializeRequest.max_block_size)
}
inline ::int64_t InitializeRequest::_internal_max_block_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_block_size_;
}
inline void InitializeRequest::_internal_set_max_block_size(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.max_block_size_ = value;
}

// int32 max_block_object_count = 13;
inline void InitializeRequest::clear_max_block_object_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_block_object_count_ = 0;
}
inline ::int32_t InitializeRequest::max_block_object_count() const {
  // @@protoc_insertion_point(field_get:cacheengine.InitializeRequest.max_block_object_count)
  return _internal_max_block_object_count();
}
inline void InitializeRequest::set_max_block_object_count(::int32_t value) {
  _internal_set_max_block_object_count(value);
  // @@protoc_insertion_point(field_set:cacheengine.InitializeRequest.max_block_object_count)
}
inline ::int32_t InitializeRequest::_internal_max_block_object_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_block_object_count_;
}
inline void InitializeRequest::_internal_set_max_block_object_count(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.max_block_object_count_ = value;
}

// string name = 14;
inline void InitializeRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& InitializeRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cacheengine.InitializeRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InitializeRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cacheengine.InitializeRequest.name)
}
inline std::string* InitializeRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cacheengine.InitializeRequest.name)
  return _s;
}
inline const std::string& InitializeRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void InitializeRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* InitializeRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* InitializeRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:cacheengine.InitializeRequest.name)
  return _impl_.name_.Release();
}
inline void InitializeRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cacheengine.InitializeRequest.name)
}

// string redis_conf_file_path = 15;
inline void InitializeRequest::clear_redis_conf_file_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.redis_conf_file_path_.ClearToEmpty();
}
inline const std::string& InitializeRequest::redis_conf_file_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cacheengine.InitializeRequest.redis_conf_file_path)
  return _internal_redis_conf_file_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InitializeRequest::set_redis_conf_file_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.redis_conf_file_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cacheengine.InitializeRequest.redis_conf_file_path)
}
inline std::string* InitializeRequest::mutable_redis_conf_file_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_redis_conf_file_path();
  // @@protoc_insertion_point(field_mutable:cacheengine.InitializeRequest.redis_conf_file_path)
  return _s;
}
inline const std::string& InitializeRequest::_internal_redis_conf_file_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.redis_conf_file_path_.Get();
}
inline void InitializeRequest::_internal_set_redis_conf_file_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.redis_conf_file_path_.Set(value, GetArena());
}
inline std::string* InitializeRequest::_internal_mutable_redis_conf_file_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.redis_conf_file_path_.Mutable( GetArena());
}
inline std::string* InitializeRequest::release_redis_conf_file_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:cacheengine.InitializeRequest.redis_conf_file_path)
  return _impl_.redis_conf_file_path_.Release();
}
inline void InitializeRequest::set_allocated_redis_conf_file_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.redis_conf_file_path_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.redis_conf_file_path_.IsDefault()) {
          _impl_.redis_conf_file_path_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cacheengine.InitializeRequest.redis_conf_file_path)
}

// bool latency_logging_enabled = 16;
inline void InitializeRequest::clear_latency_logging_enabled() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.latency_logging_enabled_ = false;
}
inline bool InitializeRequest::latency_logging_enabled() const {
  // @@protoc_insertion_point(field_get:cacheengine.InitializeRequest.latency_logging_enabled)
  return _internal_latency_logging_enabled();
}
inline void InitializeRequest::set_latency_logging_enabled(bool value) {
  _internal_set_latency_logging_enabled(value);
  // @@protoc_insertion_point(field_set:cacheengine.InitializeRequest.latency_logging_enabled)
}
inline bool InitializeRequest::_internal_latency_logging_enabled() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.latency_logging_enabled_;
}
inline void InitializeRequest::_internal_set_latency_logging_enabled(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.latency_logging_enabled_ = value;
}

// bool is_on_prem = 17;
inline void InitializeRequest::clear_is_on_prem() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_on_prem_ = false;
}
inline bool InitializeRequest::is_on_prem() const {
  // @@protoc_insertion_point(field_get:cacheengine.InitializeRequest.is_on_prem)
  return _internal_is_on_prem();
}
inline void InitializeRequest::set_is_on_prem(bool value) {
  _internal_set_is_on_prem(value);
  // @@protoc_insertion_point(field_set:cacheengine.InitializeRequest.is_on_prem)
}
inline bool InitializeRequest::_internal_is_on_prem() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_on_prem_;
}
inline void InitializeRequest::_internal_set_is_on_prem(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_on_prem_ = value;
}

// string local_region = 18;
inline void InitializeRequest::clear_local_region() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.local_region_.ClearToEmpty();
}
inline const std::string& InitializeRequest::local_region() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cacheengine.InitializeRequest.local_region)
  return _internal_local_region();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InitializeRequest::set_local_region(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.local_region_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cacheengine.InitializeRequest.local_region)
}
inline std::string* InitializeRequest::mutable_local_region() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_local_region();
  // @@protoc_insertion_point(field_mutable:cacheengine.InitializeRequest.local_region)
  return _s;
}
inline const std::string& InitializeRequest::_internal_local_region() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.local_region_.Get();
}
inline void InitializeRequest::_internal_set_local_region(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.local_region_.Set(value, GetArena());
}
inline std::string* InitializeRequest::_internal_mutable_local_region() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.local_region_.Mutable( GetArena());
}
inline std::string* InitializeRequest::release_local_region() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:cacheengine.InitializeRequest.local_region)
  return _impl_.local_region_.Release();
}
inline void InitializeRequest::set_allocated_local_region(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.local_region_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.local_region_.IsDefault()) {
          _impl_.local_region_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cacheengine.InitializeRequest.local_region)
}

// string remote_region = 19;
inline void InitializeRequest::clear_remote_region() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.remote_region_.ClearToEmpty();
}
inline const std::string& InitializeRequest::remote_region() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cacheengine.InitializeRequest.remote_region)
  return _internal_remote_region();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InitializeRequest::set_remote_region(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.remote_region_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cacheengine.InitializeRequest.remote_region)
}
inline std::string* InitializeRequest::mutable_remote_region() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_remote_region();
  // @@protoc_insertion_point(field_mutable:cacheengine.InitializeRequest.remote_region)
  return _s;
}
inline const std::string& InitializeRequest::_internal_remote_region() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.remote_region_.Get();
}
inline void InitializeRequest::_internal_set_remote_region(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.remote_region_.Set(value, GetArena());
}
inline std::string* InitializeRequest::_internal_mutable_remote_region() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.remote_region_.Mutable( GetArena());
}
inline std::string* InitializeRequest::release_remote_region() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:cacheengine.InitializeRequest.remote_region)
  return _impl_.remote_region_.Release();
}
inline void InitializeRequest::set_allocated_remote_region(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.remote_region_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.remote_region_.IsDefault()) {
          _impl_.remote_region_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cacheengine.InitializeRequest.remote_region)
}

// -------------------------------------------------------------------

// InitializeResponse

// bool is_running = 1;
inline void InitializeResponse::clear_is_running() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_running_ = false;
}
inline bool InitializeResponse::is_running() const {
  // @@protoc_insertion_point(field_get:cacheengine.InitializeResponse.is_running)
  return _internal_is_running();
}
inline void InitializeResponse::set_is_running(bool value) {
  _internal_set_is_running(value);
  // @@protoc_insertion_point(field_set:cacheengine.InitializeResponse.is_running)
}
inline bool InitializeResponse::_internal_is_running() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_running_;
}
inline void InitializeResponse::_internal_set_is_running(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_running_ = value;
}

// -------------------------------------------------------------------

// PutRequest

// string key = 1;
inline void PutRequest::clear_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& PutRequest::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cacheengine.PutRequest.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PutRequest::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cacheengine.PutRequest.key)
}
inline std::string* PutRequest::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:cacheengine.PutRequest.key)
  return _s;
}
inline const std::string& PutRequest::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void PutRequest::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(value, GetArena());
}
inline std::string* PutRequest::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* PutRequest::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:cacheengine.PutRequest.key)
  return _impl_.key_.Release();
}
inline void PutRequest::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cacheengine.PutRequest.key)
}

// bytes data = 2;
inline void PutRequest::clear_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& PutRequest::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cacheengine.PutRequest.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PutRequest::set_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cacheengine.PutRequest.data)
}
inline std::string* PutRequest::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:cacheengine.PutRequest.data)
  return _s;
}
inline const std::string& PutRequest::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_.Get();
}
inline void PutRequest::_internal_set_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.Set(value, GetArena());
}
inline std::string* PutRequest::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* PutRequest::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:cacheengine.PutRequest.data)
  return _impl_.data_.Release();
}
inline void PutRequest::set_allocated_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cacheengine.PutRequest.data)
}

// -------------------------------------------------------------------

// PutResponse

// bool success = 1;
inline void PutResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool PutResponse::success() const {
  // @@protoc_insertion_point(field_get:cacheengine.PutResponse.success)
  return _internal_success();
}
inline void PutResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:cacheengine.PutResponse.success)
}
inline bool PutResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void PutResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// -------------------------------------------------------------------

// GetRequest

// string key = 1;
inline void GetRequest::clear_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& GetRequest::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cacheengine.GetRequest.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetRequest::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cacheengine.GetRequest.key)
}
inline std::string* GetRequest::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:cacheengine.GetRequest.key)
  return _s;
}
inline const std::string& GetRequest::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void GetRequest::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(value, GetArena());
}
inline std::string* GetRequest::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* GetRequest::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:cacheengine.GetRequest.key)
  return _impl_.key_.Release();
}
inline void GetRequest::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cacheengine.GetRequest.key)
}

// -------------------------------------------------------------------

// GetResponse

// bool exists = 1;
inline void GetResponse::clear_exists() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exists_ = false;
}
inline bool GetResponse::exists() const {
  // @@protoc_insertion_point(field_get:cacheengine.GetResponse.exists)
  return _internal_exists();
}
inline void GetResponse::set_exists(bool value) {
  _internal_set_exists(value);
  // @@protoc_insertion_point(field_set:cacheengine.GetResponse.exists)
}
inline bool GetResponse::_internal_exists() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exists_;
}
inline void GetResponse::_internal_set_exists(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exists_ = value;
}

// bytes data = 2;
inline void GetResponse::clear_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& GetResponse::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cacheengine.GetResponse.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetResponse::set_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cacheengine.GetResponse.data)
}
inline std::string* GetResponse::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:cacheengine.GetResponse.data)
  return _s;
}
inline const std::string& GetResponse::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_.Get();
}
inline void GetResponse::_internal_set_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.Set(value, GetArena());
}
inline std::string* GetResponse::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* GetResponse::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:cacheengine.GetResponse.data)
  return _impl_.data_.Release();
}
inline void GetResponse::set_allocated_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cacheengine.GetResponse.data)
}

// int32 src = 3;
inline void GetResponse::clear_src() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.src_ = 0;
}
inline ::int32_t GetResponse::src() const {
  // @@protoc_insertion_point(field_get:cacheengine.GetResponse.src)
  return _internal_src();
}
inline void GetResponse::set_src(::int32_t value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:cacheengine.GetResponse.src)
}
inline ::int32_t GetResponse::_internal_src() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.src_;
}
inline void GetResponse::_internal_set_src(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.src_ = value;
}

// -------------------------------------------------------------------

// DeleteRequest

// string key = 1;
inline void DeleteRequest::clear_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& DeleteRequest::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cacheengine.DeleteRequest.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeleteRequest::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cacheengine.DeleteRequest.key)
}
inline std::string* DeleteRequest::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:cacheengine.DeleteRequest.key)
  return _s;
}
inline const std::string& DeleteRequest::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void DeleteRequest::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(value, GetArena());
}
inline std::string* DeleteRequest::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* DeleteRequest::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:cacheengine.DeleteRequest.key)
  return _impl_.key_.Release();
}
inline void DeleteRequest::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cacheengine.DeleteRequest.key)
}

// -------------------------------------------------------------------

// DeleteResponse

// bool success = 1;
inline void DeleteResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool DeleteResponse::success() const {
  // @@protoc_insertion_point(field_get:cacheengine.DeleteResponse.success)
  return _internal_success();
}
inline void DeleteResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:cacheengine.DeleteResponse.success)
}
inline bool DeleteResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void DeleteResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// -------------------------------------------------------------------

// FlushLogRequest

// string cache_name = 1;
inline void FlushLogRequest::clear_cache_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cache_name_.ClearToEmpty();
}
inline const std::string& FlushLogRequest::cache_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cacheengine.FlushLogRequest.cache_name)
  return _internal_cache_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FlushLogRequest::set_cache_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cache_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cacheengine.FlushLogRequest.cache_name)
}
inline std::string* FlushLogRequest::mutable_cache_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cache_name();
  // @@protoc_insertion_point(field_mutable:cacheengine.FlushLogRequest.cache_name)
  return _s;
}
inline const std::string& FlushLogRequest::_internal_cache_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cache_name_.Get();
}
inline void FlushLogRequest::_internal_set_cache_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cache_name_.Set(value, GetArena());
}
inline std::string* FlushLogRequest::_internal_mutable_cache_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.cache_name_.Mutable( GetArena());
}
inline std::string* FlushLogRequest::release_cache_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:cacheengine.FlushLogRequest.cache_name)
  return _impl_.cache_name_.Release();
}
inline void FlushLogRequest::set_allocated_cache_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cache_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cache_name_.IsDefault()) {
          _impl_.cache_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cacheengine.FlushLogRequest.cache_name)
}

// string log_dir_path = 2;
inline void FlushLogRequest::clear_log_dir_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.log_dir_path_.ClearToEmpty();
}
inline const std::string& FlushLogRequest::log_dir_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cacheengine.FlushLogRequest.log_dir_path)
  return _internal_log_dir_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FlushLogRequest::set_log_dir_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.log_dir_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cacheengine.FlushLogRequest.log_dir_path)
}
inline std::string* FlushLogRequest::mutable_log_dir_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_log_dir_path();
  // @@protoc_insertion_point(field_mutable:cacheengine.FlushLogRequest.log_dir_path)
  return _s;
}
inline const std::string& FlushLogRequest::_internal_log_dir_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.log_dir_path_.Get();
}
inline void FlushLogRequest::_internal_set_log_dir_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.log_dir_path_.Set(value, GetArena());
}
inline std::string* FlushLogRequest::_internal_mutable_log_dir_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.log_dir_path_.Mutable( GetArena());
}
inline std::string* FlushLogRequest::release_log_dir_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:cacheengine.FlushLogRequest.log_dir_path)
  return _impl_.log_dir_path_.Release();
}
inline void FlushLogRequest::set_allocated_log_dir_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.log_dir_path_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.log_dir_path_.IsDefault()) {
          _impl_.log_dir_path_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cacheengine.FlushLogRequest.log_dir_path)
}

// -------------------------------------------------------------------

// FlushLogResponse

// bool success = 1;
inline void FlushLogResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool FlushLogResponse::success() const {
  // @@protoc_insertion_point(field_get:cacheengine.FlushLogResponse.success)
  return _internal_success();
}
inline void FlushLogResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:cacheengine.FlushLogResponse.success)
}
inline bool FlushLogResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void FlushLogResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// int32 osc_put_cnt = 2;
inline void FlushLogResponse::clear_osc_put_cnt() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.osc_put_cnt_ = 0;
}
inline ::int32_t FlushLogResponse::osc_put_cnt() const {
  // @@protoc_insertion_point(field_get:cacheengine.FlushLogResponse.osc_put_cnt)
  return _internal_osc_put_cnt();
}
inline void FlushLogResponse::set_osc_put_cnt(::int32_t value) {
  _internal_set_osc_put_cnt(value);
  // @@protoc_insertion_point(field_set:cacheengine.FlushLogResponse.osc_put_cnt)
}
inline ::int32_t FlushLogResponse::_internal_osc_put_cnt() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.osc_put_cnt_;
}
inline void FlushLogResponse::_internal_set_osc_put_cnt(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.osc_put_cnt_ = value;
}

// int64 dl_get_bytes = 3;
inline void FlushLogResponse::clear_dl_get_bytes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dl_get_bytes_ = ::int64_t{0};
}
inline ::int64_t FlushLogResponse::dl_get_bytes() const {
  // @@protoc_insertion_point(field_get:cacheengine.FlushLogResponse.dl_get_bytes)
  return _internal_dl_get_bytes();
}
inline void FlushLogResponse::set_dl_get_bytes(::int64_t value) {
  _internal_set_dl_get_bytes(value);
  // @@protoc_insertion_point(field_set:cacheengine.FlushLogResponse.dl_get_bytes)
}
inline ::int64_t FlushLogResponse::_internal_dl_get_bytes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dl_get_bytes_;
}
inline void FlushLogResponse::_internal_set_dl_get_bytes(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dl_get_bytes_ = value;
}

// int64 dl_put_bytes = 4;
inline void FlushLogResponse::clear_dl_put_bytes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dl_put_bytes_ = ::int64_t{0};
}
inline ::int64_t FlushLogResponse::dl_put_bytes() const {
  // @@protoc_insertion_point(field_get:cacheengine.FlushLogResponse.dl_put_bytes)
  return _internal_dl_put_bytes();
}
inline void FlushLogResponse::set_dl_put_bytes(::int64_t value) {
  _internal_set_dl_put_bytes(value);
  // @@protoc_insertion_point(field_set:cacheengine.FlushLogResponse.dl_put_bytes)
}
inline ::int64_t FlushLogResponse::_internal_dl_put_bytes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dl_put_bytes_;
}
inline void FlushLogResponse::_internal_set_dl_put_bytes(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dl_put_bytes_ = value;
}

// int32 file_count = 5;
inline void FlushLogResponse::clear_file_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.file_count_ = 0;
}
inline ::int32_t FlushLogResponse::file_count() const {
  // @@protoc_insertion_point(field_get:cacheengine.FlushLogResponse.file_count)
  return _internal_file_count();
}
inline void FlushLogResponse::set_file_count(::int32_t value) {
  _internal_set_file_count(value);
  // @@protoc_insertion_point(field_set:cacheengine.FlushLogResponse.file_count)
}
inline ::int32_t FlushLogResponse::_internal_file_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.file_count_;
}
inline void FlushLogResponse::_internal_set_file_count(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.file_count_ = value;
}

// -------------------------------------------------------------------

// FlushLatencyLogRequest

// string log_file_path = 1;
inline void FlushLatencyLogRequest::clear_log_file_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.log_file_path_.ClearToEmpty();
}
inline const std::string& FlushLatencyLogRequest::log_file_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cacheengine.FlushLatencyLogRequest.log_file_path)
  return _internal_log_file_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FlushLatencyLogRequest::set_log_file_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.log_file_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cacheengine.FlushLatencyLogRequest.log_file_path)
}
inline std::string* FlushLatencyLogRequest::mutable_log_file_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_log_file_path();
  // @@protoc_insertion_point(field_mutable:cacheengine.FlushLatencyLogRequest.log_file_path)
  return _s;
}
inline const std::string& FlushLatencyLogRequest::_internal_log_file_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.log_file_path_.Get();
}
inline void FlushLatencyLogRequest::_internal_set_log_file_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.log_file_path_.Set(value, GetArena());
}
inline std::string* FlushLatencyLogRequest::_internal_mutable_log_file_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.log_file_path_.Mutable( GetArena());
}
inline std::string* FlushLatencyLogRequest::release_log_file_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:cacheengine.FlushLatencyLogRequest.log_file_path)
  return _impl_.log_file_path_.Release();
}
inline void FlushLatencyLogRequest::set_allocated_log_file_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.log_file_path_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.log_file_path_.IsDefault()) {
          _impl_.log_file_path_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cacheengine.FlushLatencyLogRequest.log_file_path)
}

// -------------------------------------------------------------------

// FlushLatencyLogResponse

// -------------------------------------------------------------------

// ClearDRAMCacheRequest

// -------------------------------------------------------------------

// ClearDRAMCacheResponse

// -------------------------------------------------------------------

// PrefetchRequest

// bool new_server = 1;
inline void PrefetchRequest::clear_new_server() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.new_server_ = false;
}
inline bool PrefetchRequest::new_server() const {
  // @@protoc_insertion_point(field_get:cacheengine.PrefetchRequest.new_server)
  return _internal_new_server();
}
inline void PrefetchRequest::set_new_server(bool value) {
  _internal_set_new_server(value);
  // @@protoc_insertion_point(field_set:cacheengine.PrefetchRequest.new_server)
}
inline bool PrefetchRequest::_internal_new_server() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.new_server_;
}
inline void PrefetchRequest::_internal_set_new_server(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.new_server_ = value;
}

// string target_address = 2;
inline void PrefetchRequest::clear_target_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.target_address_.ClearToEmpty();
}
inline const std::string& PrefetchRequest::target_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cacheengine.PrefetchRequest.target_address)
  return _internal_target_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PrefetchRequest::set_target_address(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.target_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cacheengine.PrefetchRequest.target_address)
}
inline std::string* PrefetchRequest::mutable_target_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_target_address();
  // @@protoc_insertion_point(field_mutable:cacheengine.PrefetchRequest.target_address)
  return _s;
}
inline const std::string& PrefetchRequest::_internal_target_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.target_address_.Get();
}
inline void PrefetchRequest::_internal_set_target_address(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.target_address_.Set(value, GetArena());
}
inline std::string* PrefetchRequest::_internal_mutable_target_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.target_address_.Mutable( GetArena());
}
inline std::string* PrefetchRequest::release_target_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:cacheengine.PrefetchRequest.target_address)
  return _impl_.target_address_.Release();
}
inline void PrefetchRequest::set_allocated_target_address(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.target_address_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.target_address_.IsDefault()) {
          _impl_.target_address_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cacheengine.PrefetchRequest.target_address)
}

// string cache_engine_addresses = 3;
inline void PrefetchRequest::clear_cache_engine_addresses() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cache_engine_addresses_.ClearToEmpty();
}
inline const std::string& PrefetchRequest::cache_engine_addresses() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cacheengine.PrefetchRequest.cache_engine_addresses)
  return _internal_cache_engine_addresses();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PrefetchRequest::set_cache_engine_addresses(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cache_engine_addresses_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cacheengine.PrefetchRequest.cache_engine_addresses)
}
inline std::string* PrefetchRequest::mutable_cache_engine_addresses() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cache_engine_addresses();
  // @@protoc_insertion_point(field_mutable:cacheengine.PrefetchRequest.cache_engine_addresses)
  return _s;
}
inline const std::string& PrefetchRequest::_internal_cache_engine_addresses() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cache_engine_addresses_.Get();
}
inline void PrefetchRequest::_internal_set_cache_engine_addresses(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cache_engine_addresses_.Set(value, GetArena());
}
inline std::string* PrefetchRequest::_internal_mutable_cache_engine_addresses() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.cache_engine_addresses_.Mutable( GetArena());
}
inline std::string* PrefetchRequest::release_cache_engine_addresses() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:cacheengine.PrefetchRequest.cache_engine_addresses)
  return _impl_.cache_engine_addresses_.Release();
}
inline void PrefetchRequest::set_allocated_cache_engine_addresses(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cache_engine_addresses_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cache_engine_addresses_.IsDefault()) {
          _impl_.cache_engine_addresses_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cacheengine.PrefetchRequest.cache_engine_addresses)
}

// string sort_file_path = 4;
inline void PrefetchRequest::clear_sort_file_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sort_file_path_.ClearToEmpty();
}
inline const std::string& PrefetchRequest::sort_file_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cacheengine.PrefetchRequest.sort_file_path)
  return _internal_sort_file_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PrefetchRequest::set_sort_file_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sort_file_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cacheengine.PrefetchRequest.sort_file_path)
}
inline std::string* PrefetchRequest::mutable_sort_file_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sort_file_path();
  // @@protoc_insertion_point(field_mutable:cacheengine.PrefetchRequest.sort_file_path)
  return _s;
}
inline const std::string& PrefetchRequest::_internal_sort_file_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sort_file_path_.Get();
}
inline void PrefetchRequest::_internal_set_sort_file_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sort_file_path_.Set(value, GetArena());
}
inline std::string* PrefetchRequest::_internal_mutable_sort_file_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.sort_file_path_.Mutable( GetArena());
}
inline std::string* PrefetchRequest::release_sort_file_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:cacheengine.PrefetchRequest.sort_file_path)
  return _impl_.sort_file_path_.Release();
}
inline void PrefetchRequest::set_allocated_sort_file_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sort_file_path_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sort_file_path_.IsDefault()) {
          _impl_.sort_file_path_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cacheengine.PrefetchRequest.sort_file_path)
}

// -------------------------------------------------------------------

// PrefetchResponse

// bool success = 1;
inline void PrefetchResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool PrefetchResponse::success() const {
  // @@protoc_insertion_point(field_get:cacheengine.PrefetchResponse.success)
  return _internal_success();
}
inline void PrefetchResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:cacheengine.PrefetchResponse.success)
}
inline bool PrefetchResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void PrefetchResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// -------------------------------------------------------------------

// StopRequest

// -------------------------------------------------------------------

// StopResponse

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace cacheengine


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cache_5fengine_2eproto_2epb_2eh
