// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mbakery.proto

#include "mbakery.pb.h"
#include "mbakery.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace mbakery {

static const char* MBakeryService_method_names[] = {
  "/mbakery.MBakeryService/Connect",
  "/mbakery.MBakeryService/OptTrigger",
  "/mbakery.MBakeryService/OptStop",
};

std::unique_ptr< MBakeryService::Stub> MBakeryService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MBakeryService::Stub> stub(new MBakeryService::Stub(channel, options));
  return stub;
}

MBakeryService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Connect_(MBakeryService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OptTrigger_(MBakeryService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OptStop_(MBakeryService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MBakeryService::Stub::Connect(::grpc::ClientContext* context, const ::mbakery::ConnectRequest& request, ::mbakery::ConnectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mbakery::ConnectRequest, ::mbakery::ConnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Connect_, context, request, response);
}

void MBakeryService::Stub::async::Connect(::grpc::ClientContext* context, const ::mbakery::ConnectRequest* request, ::mbakery::ConnectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mbakery::ConnectRequest, ::mbakery::ConnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, std::move(f));
}

void MBakeryService::Stub::async::Connect(::grpc::ClientContext* context, const ::mbakery::ConnectRequest* request, ::mbakery::ConnectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mbakery::ConnectResponse>* MBakeryService::Stub::PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::mbakery::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mbakery::ConnectResponse, ::mbakery::ConnectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Connect_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mbakery::ConnectResponse>* MBakeryService::Stub::AsyncConnectRaw(::grpc::ClientContext* context, const ::mbakery::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConnectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MBakeryService::Stub::OptTrigger(::grpc::ClientContext* context, const ::mbakery::OptTriggerRequest& request, ::mbakery::OptTriggerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mbakery::OptTriggerRequest, ::mbakery::OptTriggerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OptTrigger_, context, request, response);
}

void MBakeryService::Stub::async::OptTrigger(::grpc::ClientContext* context, const ::mbakery::OptTriggerRequest* request, ::mbakery::OptTriggerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mbakery::OptTriggerRequest, ::mbakery::OptTriggerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OptTrigger_, context, request, response, std::move(f));
}

void MBakeryService::Stub::async::OptTrigger(::grpc::ClientContext* context, const ::mbakery::OptTriggerRequest* request, ::mbakery::OptTriggerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OptTrigger_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mbakery::OptTriggerResponse>* MBakeryService::Stub::PrepareAsyncOptTriggerRaw(::grpc::ClientContext* context, const ::mbakery::OptTriggerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mbakery::OptTriggerResponse, ::mbakery::OptTriggerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OptTrigger_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mbakery::OptTriggerResponse>* MBakeryService::Stub::AsyncOptTriggerRaw(::grpc::ClientContext* context, const ::mbakery::OptTriggerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOptTriggerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MBakeryService::Stub::OptStop(::grpc::ClientContext* context, const ::mbakery::OptStopRequest& request, ::mbakery::OptStopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mbakery::OptStopRequest, ::mbakery::OptStopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OptStop_, context, request, response);
}

void MBakeryService::Stub::async::OptStop(::grpc::ClientContext* context, const ::mbakery::OptStopRequest* request, ::mbakery::OptStopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mbakery::OptStopRequest, ::mbakery::OptStopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OptStop_, context, request, response, std::move(f));
}

void MBakeryService::Stub::async::OptStop(::grpc::ClientContext* context, const ::mbakery::OptStopRequest* request, ::mbakery::OptStopResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OptStop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mbakery::OptStopResponse>* MBakeryService::Stub::PrepareAsyncOptStopRaw(::grpc::ClientContext* context, const ::mbakery::OptStopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mbakery::OptStopResponse, ::mbakery::OptStopRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OptStop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mbakery::OptStopResponse>* MBakeryService::Stub::AsyncOptStopRaw(::grpc::ClientContext* context, const ::mbakery::OptStopRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOptStopRaw(context, request, cq);
  result->StartCall();
  return result;
}

MBakeryService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MBakeryService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MBakeryService::Service, ::mbakery::ConnectRequest, ::mbakery::ConnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MBakeryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mbakery::ConnectRequest* req,
             ::mbakery::ConnectResponse* resp) {
               return service->Connect(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MBakeryService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MBakeryService::Service, ::mbakery::OptTriggerRequest, ::mbakery::OptTriggerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MBakeryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mbakery::OptTriggerRequest* req,
             ::mbakery::OptTriggerResponse* resp) {
               return service->OptTrigger(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MBakeryService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MBakeryService::Service, ::mbakery::OptStopRequest, ::mbakery::OptStopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MBakeryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mbakery::OptStopRequest* req,
             ::mbakery::OptStopResponse* resp) {
               return service->OptStop(ctx, req, resp);
             }, this)));
}

MBakeryService::Service::~Service() {
}

::grpc::Status MBakeryService::Service::Connect(::grpc::ServerContext* context, const ::mbakery::ConnectRequest* request, ::mbakery::ConnectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MBakeryService::Service::OptTrigger(::grpc::ServerContext* context, const ::mbakery::OptTriggerRequest* request, ::mbakery::OptTriggerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MBakeryService::Service::OptStop(::grpc::ServerContext* context, const ::mbakery::OptStopRequest* request, ::mbakery::OptStopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mbakery

