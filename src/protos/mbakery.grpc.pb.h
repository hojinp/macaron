// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mbakery.proto
#ifndef GRPC_mbakery_2eproto__INCLUDED
#define GRPC_mbakery_2eproto__INCLUDED

#include "mbakery.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace mbakery {

// The controller service definition
class MBakeryService final {
 public:
  static constexpr char const* service_full_name() {
    return "mbakery.MBakeryService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Connect(::grpc::ClientContext* context, const ::mbakery::ConnectRequest& request, ::mbakery::ConnectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mbakery::ConnectResponse>> AsyncConnect(::grpc::ClientContext* context, const ::mbakery::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mbakery::ConnectResponse>>(AsyncConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mbakery::ConnectResponse>> PrepareAsyncConnect(::grpc::ClientContext* context, const ::mbakery::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mbakery::ConnectResponse>>(PrepareAsyncConnectRaw(context, request, cq));
    }
    virtual ::grpc::Status OptTrigger(::grpc::ClientContext* context, const ::mbakery::OptTriggerRequest& request, ::mbakery::OptTriggerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mbakery::OptTriggerResponse>> AsyncOptTrigger(::grpc::ClientContext* context, const ::mbakery::OptTriggerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mbakery::OptTriggerResponse>>(AsyncOptTriggerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mbakery::OptTriggerResponse>> PrepareAsyncOptTrigger(::grpc::ClientContext* context, const ::mbakery::OptTriggerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mbakery::OptTriggerResponse>>(PrepareAsyncOptTriggerRaw(context, request, cq));
    }
    virtual ::grpc::Status OptStop(::grpc::ClientContext* context, const ::mbakery::OptStopRequest& request, ::mbakery::OptStopResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mbakery::OptStopResponse>> AsyncOptStop(::grpc::ClientContext* context, const ::mbakery::OptStopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mbakery::OptStopResponse>>(AsyncOptStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mbakery::OptStopResponse>> PrepareAsyncOptStop(::grpc::ClientContext* context, const ::mbakery::OptStopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mbakery::OptStopResponse>>(PrepareAsyncOptStopRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Connect(::grpc::ClientContext* context, const ::mbakery::ConnectRequest* request, ::mbakery::ConnectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Connect(::grpc::ClientContext* context, const ::mbakery::ConnectRequest* request, ::mbakery::ConnectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OptTrigger(::grpc::ClientContext* context, const ::mbakery::OptTriggerRequest* request, ::mbakery::OptTriggerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OptTrigger(::grpc::ClientContext* context, const ::mbakery::OptTriggerRequest* request, ::mbakery::OptTriggerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OptStop(::grpc::ClientContext* context, const ::mbakery::OptStopRequest* request, ::mbakery::OptStopResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OptStop(::grpc::ClientContext* context, const ::mbakery::OptStopRequest* request, ::mbakery::OptStopResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mbakery::ConnectResponse>* AsyncConnectRaw(::grpc::ClientContext* context, const ::mbakery::ConnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mbakery::ConnectResponse>* PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::mbakery::ConnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mbakery::OptTriggerResponse>* AsyncOptTriggerRaw(::grpc::ClientContext* context, const ::mbakery::OptTriggerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mbakery::OptTriggerResponse>* PrepareAsyncOptTriggerRaw(::grpc::ClientContext* context, const ::mbakery::OptTriggerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mbakery::OptStopResponse>* AsyncOptStopRaw(::grpc::ClientContext* context, const ::mbakery::OptStopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mbakery::OptStopResponse>* PrepareAsyncOptStopRaw(::grpc::ClientContext* context, const ::mbakery::OptStopRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Connect(::grpc::ClientContext* context, const ::mbakery::ConnectRequest& request, ::mbakery::ConnectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mbakery::ConnectResponse>> AsyncConnect(::grpc::ClientContext* context, const ::mbakery::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mbakery::ConnectResponse>>(AsyncConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mbakery::ConnectResponse>> PrepareAsyncConnect(::grpc::ClientContext* context, const ::mbakery::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mbakery::ConnectResponse>>(PrepareAsyncConnectRaw(context, request, cq));
    }
    ::grpc::Status OptTrigger(::grpc::ClientContext* context, const ::mbakery::OptTriggerRequest& request, ::mbakery::OptTriggerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mbakery::OptTriggerResponse>> AsyncOptTrigger(::grpc::ClientContext* context, const ::mbakery::OptTriggerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mbakery::OptTriggerResponse>>(AsyncOptTriggerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mbakery::OptTriggerResponse>> PrepareAsyncOptTrigger(::grpc::ClientContext* context, const ::mbakery::OptTriggerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mbakery::OptTriggerResponse>>(PrepareAsyncOptTriggerRaw(context, request, cq));
    }
    ::grpc::Status OptStop(::grpc::ClientContext* context, const ::mbakery::OptStopRequest& request, ::mbakery::OptStopResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mbakery::OptStopResponse>> AsyncOptStop(::grpc::ClientContext* context, const ::mbakery::OptStopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mbakery::OptStopResponse>>(AsyncOptStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mbakery::OptStopResponse>> PrepareAsyncOptStop(::grpc::ClientContext* context, const ::mbakery::OptStopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mbakery::OptStopResponse>>(PrepareAsyncOptStopRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Connect(::grpc::ClientContext* context, const ::mbakery::ConnectRequest* request, ::mbakery::ConnectResponse* response, std::function<void(::grpc::Status)>) override;
      void Connect(::grpc::ClientContext* context, const ::mbakery::ConnectRequest* request, ::mbakery::ConnectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OptTrigger(::grpc::ClientContext* context, const ::mbakery::OptTriggerRequest* request, ::mbakery::OptTriggerResponse* response, std::function<void(::grpc::Status)>) override;
      void OptTrigger(::grpc::ClientContext* context, const ::mbakery::OptTriggerRequest* request, ::mbakery::OptTriggerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OptStop(::grpc::ClientContext* context, const ::mbakery::OptStopRequest* request, ::mbakery::OptStopResponse* response, std::function<void(::grpc::Status)>) override;
      void OptStop(::grpc::ClientContext* context, const ::mbakery::OptStopRequest* request, ::mbakery::OptStopResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mbakery::ConnectResponse>* AsyncConnectRaw(::grpc::ClientContext* context, const ::mbakery::ConnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mbakery::ConnectResponse>* PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::mbakery::ConnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mbakery::OptTriggerResponse>* AsyncOptTriggerRaw(::grpc::ClientContext* context, const ::mbakery::OptTriggerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mbakery::OptTriggerResponse>* PrepareAsyncOptTriggerRaw(::grpc::ClientContext* context, const ::mbakery::OptTriggerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mbakery::OptStopResponse>* AsyncOptStopRaw(::grpc::ClientContext* context, const ::mbakery::OptStopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mbakery::OptStopResponse>* PrepareAsyncOptStopRaw(::grpc::ClientContext* context, const ::mbakery::OptStopRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Connect_;
    const ::grpc::internal::RpcMethod rpcmethod_OptTrigger_;
    const ::grpc::internal::RpcMethod rpcmethod_OptStop_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Connect(::grpc::ServerContext* context, const ::mbakery::ConnectRequest* request, ::mbakery::ConnectResponse* response);
    virtual ::grpc::Status OptTrigger(::grpc::ServerContext* context, const ::mbakery::OptTriggerRequest* request, ::mbakery::OptTriggerResponse* response);
    virtual ::grpc::Status OptStop(::grpc::ServerContext* context, const ::mbakery::OptStopRequest* request, ::mbakery::OptStopResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Connect() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::mbakery::ConnectRequest* /*request*/, ::mbakery::ConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnect(::grpc::ServerContext* context, ::mbakery::ConnectRequest* request, ::grpc::ServerAsyncResponseWriter< ::mbakery::ConnectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OptTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OptTrigger() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_OptTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OptTrigger(::grpc::ServerContext* /*context*/, const ::mbakery::OptTriggerRequest* /*request*/, ::mbakery::OptTriggerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOptTrigger(::grpc::ServerContext* context, ::mbakery::OptTriggerRequest* request, ::grpc::ServerAsyncResponseWriter< ::mbakery::OptTriggerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OptStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OptStop() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_OptStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OptStop(::grpc::ServerContext* /*context*/, const ::mbakery::OptStopRequest* /*request*/, ::mbakery::OptStopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOptStop(::grpc::ServerContext* context, ::mbakery::OptStopRequest* request, ::grpc::ServerAsyncResponseWriter< ::mbakery::OptStopResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Connect<WithAsyncMethod_OptTrigger<WithAsyncMethod_OptStop<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Connect() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::mbakery::ConnectRequest, ::mbakery::ConnectResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mbakery::ConnectRequest* request, ::mbakery::ConnectResponse* response) { return this->Connect(context, request, response); }));}
    void SetMessageAllocatorFor_Connect(
        ::grpc::MessageAllocator< ::mbakery::ConnectRequest, ::mbakery::ConnectResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mbakery::ConnectRequest, ::mbakery::ConnectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::mbakery::ConnectRequest* /*request*/, ::mbakery::ConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Connect(
      ::grpc::CallbackServerContext* /*context*/, const ::mbakery::ConnectRequest* /*request*/, ::mbakery::ConnectResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OptTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OptTrigger() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::mbakery::OptTriggerRequest, ::mbakery::OptTriggerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mbakery::OptTriggerRequest* request, ::mbakery::OptTriggerResponse* response) { return this->OptTrigger(context, request, response); }));}
    void SetMessageAllocatorFor_OptTrigger(
        ::grpc::MessageAllocator< ::mbakery::OptTriggerRequest, ::mbakery::OptTriggerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mbakery::OptTriggerRequest, ::mbakery::OptTriggerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OptTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OptTrigger(::grpc::ServerContext* /*context*/, const ::mbakery::OptTriggerRequest* /*request*/, ::mbakery::OptTriggerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OptTrigger(
      ::grpc::CallbackServerContext* /*context*/, const ::mbakery::OptTriggerRequest* /*request*/, ::mbakery::OptTriggerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OptStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OptStop() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::mbakery::OptStopRequest, ::mbakery::OptStopResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mbakery::OptStopRequest* request, ::mbakery::OptStopResponse* response) { return this->OptStop(context, request, response); }));}
    void SetMessageAllocatorFor_OptStop(
        ::grpc::MessageAllocator< ::mbakery::OptStopRequest, ::mbakery::OptStopResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mbakery::OptStopRequest, ::mbakery::OptStopResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OptStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OptStop(::grpc::ServerContext* /*context*/, const ::mbakery::OptStopRequest* /*request*/, ::mbakery::OptStopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OptStop(
      ::grpc::CallbackServerContext* /*context*/, const ::mbakery::OptStopRequest* /*request*/, ::mbakery::OptStopResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Connect<WithCallbackMethod_OptTrigger<WithCallbackMethod_OptStop<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Connect() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::mbakery::ConnectRequest* /*request*/, ::mbakery::ConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OptTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OptTrigger() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_OptTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OptTrigger(::grpc::ServerContext* /*context*/, const ::mbakery::OptTriggerRequest* /*request*/, ::mbakery::OptTriggerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OptStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OptStop() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_OptStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OptStop(::grpc::ServerContext* /*context*/, const ::mbakery::OptStopRequest* /*request*/, ::mbakery::OptStopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Connect() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::mbakery::ConnectRequest* /*request*/, ::mbakery::ConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OptTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OptTrigger() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_OptTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OptTrigger(::grpc::ServerContext* /*context*/, const ::mbakery::OptTriggerRequest* /*request*/, ::mbakery::OptTriggerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOptTrigger(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OptStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OptStop() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_OptStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OptStop(::grpc::ServerContext* /*context*/, const ::mbakery::OptStopRequest* /*request*/, ::mbakery::OptStopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOptStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Connect() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Connect(context, request, response); }));
    }
    ~WithRawCallbackMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::mbakery::ConnectRequest* /*request*/, ::mbakery::ConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Connect(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OptTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OptTrigger() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OptTrigger(context, request, response); }));
    }
    ~WithRawCallbackMethod_OptTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OptTrigger(::grpc::ServerContext* /*context*/, const ::mbakery::OptTriggerRequest* /*request*/, ::mbakery::OptTriggerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OptTrigger(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OptStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OptStop() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OptStop(context, request, response); }));
    }
    ~WithRawCallbackMethod_OptStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OptStop(::grpc::ServerContext* /*context*/, const ::mbakery::OptStopRequest* /*request*/, ::mbakery::OptStopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OptStop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Connect() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mbakery::ConnectRequest, ::mbakery::ConnectResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mbakery::ConnectRequest, ::mbakery::ConnectResponse>* streamer) {
                       return this->StreamedConnect(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::mbakery::ConnectRequest* /*request*/, ::mbakery::ConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConnect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mbakery::ConnectRequest,::mbakery::ConnectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OptTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OptTrigger() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mbakery::OptTriggerRequest, ::mbakery::OptTriggerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mbakery::OptTriggerRequest, ::mbakery::OptTriggerResponse>* streamer) {
                       return this->StreamedOptTrigger(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OptTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OptTrigger(::grpc::ServerContext* /*context*/, const ::mbakery::OptTriggerRequest* /*request*/, ::mbakery::OptTriggerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOptTrigger(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mbakery::OptTriggerRequest,::mbakery::OptTriggerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OptStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OptStop() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mbakery::OptStopRequest, ::mbakery::OptStopResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mbakery::OptStopRequest, ::mbakery::OptStopResponse>* streamer) {
                       return this->StreamedOptStop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OptStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OptStop(::grpc::ServerContext* /*context*/, const ::mbakery::OptStopRequest* /*request*/, ::mbakery::OptStopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOptStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mbakery::OptStopRequest,::mbakery::OptStopResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Connect<WithStreamedUnaryMethod_OptTrigger<WithStreamedUnaryMethod_OptStop<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Connect<WithStreamedUnaryMethod_OptTrigger<WithStreamedUnaryMethod_OptStop<Service > > > StreamedService;
};

}  // namespace mbakery


#endif  // GRPC_mbakery_2eproto__INCLUDED
